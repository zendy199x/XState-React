// runtime can't be in strict mode because a global variable is assign and maybe created.
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["amp"],{

/***/ "./node_modules/next/dist/client/dev/amp-dev.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/dev/amp-dev.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nvar _eventSourcePolyfill = _interopRequireDefault(__webpack_require__(/*! ./event-source-polyfill */ \"./node_modules/next/dist/client/dev/event-source-polyfill.js\"));\n\nvar _eventsource = __webpack_require__(/*! ./error-overlay/eventsource */ \"./node_modules/next/dist/client/dev/error-overlay/eventsource.js\");\n\nvar _onDemandEntriesUtils = __webpack_require__(/*! ./on-demand-entries-utils */ \"./node_modules/next/dist/client/dev/on-demand-entries-utils.js\");\n\nvar _fouc = __webpack_require__(/*! ./fouc */ \"./node_modules/next/dist/client/dev/fouc.js\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nif (!window.EventSource) {\n  window.EventSource = _eventSourcePolyfill.default;\n}\n\nconst data = JSON.parse(document.getElementById('__NEXT_DATA__').textContent);\nlet {\n  assetPrefix,\n  page\n} = data;\nassetPrefix = assetPrefix || '';\nlet mostRecentHash = null;\n/* eslint-disable-next-line */\n\nlet curHash = __webpack_require__.h();\nconst hotUpdatePath = assetPrefix + (assetPrefix.endsWith('/') ? '' : '/') + '_next/static/webpack/'; // Is there a newer version of this code available?\n\nfunction isUpdateAvailable() {\n  // __webpack_hash__ is the hash of the current compilation.\n  // It's a global variable injected by Webpack.\n\n  /* eslint-disable-next-line */\n  return mostRecentHash !== __webpack_require__.h();\n} // Webpack disallows updates in other states.\n\n\nfunction canApplyUpdates() {\n  return module.hot.status() === 'idle';\n}\n\nfunction _tryApplyUpdates() {\n  _tryApplyUpdates = // This function reads code updates on the fly and hard\n  // reloads the page when it has changed.\n  _asyncToGenerator(function* () {\n    if (!isUpdateAvailable() || !canApplyUpdates()) {\n      return;\n    }\n\n    try {\n      const res = yield fetch(typeof __webpack_require__.j !== 'undefined' ? `${hotUpdatePath}${curHash}.${__webpack_require__.j}.hot-update.json` : `${hotUpdatePath}${curHash}.hot-update.json`);\n      const jsonData = yield res.json();\n      const curPage = page === '/' ? 'index' : page; // webpack 5 uses an array instead\n\n      const pageUpdated = (Array.isArray(jsonData.c) ? jsonData.c : Object.keys(jsonData.c)).some(mod => {\n        return mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`) !== -1 || mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`.replace(/\\//g, '\\\\')) !== -1;\n      });\n\n      if (pageUpdated) {\n        document.location.reload(true);\n      } else {\n        curHash = mostRecentHash;\n      }\n    } catch (err) {\n      console.error('Error occurred checking for update', err);\n      document.location.reload(true);\n    }\n  });\n  return _tryApplyUpdates.apply(this, arguments);\n}\n\nfunction tryApplyUpdates() {\n  return _tryApplyUpdates.apply(this, arguments);\n}\n\n(0, _eventsource).addMessageListener(event => {\n  if (event.data === '\\uD83D\\uDC93') {\n    return;\n  }\n\n  try {\n    const message = JSON.parse(event.data);\n\n    if (message.action === 'sync' || message.action === 'built') {\n      if (!message.hash) {\n        return;\n      }\n\n      mostRecentHash = message.hash;\n      tryApplyUpdates();\n    } else if (message.action === 'reloadPage') {\n      document.location.reload(true);\n    }\n  } catch (ex) {\n    console.warn('Invalid HMR message: ' + event.data + '\\n' + ex);\n  }\n});\n(0, _onDemandEntriesUtils).setupPing(assetPrefix, () => page);\n(0, _fouc).displayContent();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/amp-dev.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/error-overlay/eventsource.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/client/dev/error-overlay/eventsource.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.addMessageListener = addMessageListener;\nexports.getEventSourceWrapper = getEventSourceWrapper;\nconst eventCallbacks = [];\n\nfunction EventSourceWrapper(options) {\n  var source;\n  var lastActivity = new Date();\n  var listeners = [];\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000;\n  }\n\n  init();\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect();\n    }\n  }, options.timeout / 2);\n\n  function init() {\n    source = new window.EventSource(options.path);\n    source.onopen = handleOnline;\n    source.onerror = handleDisconnect;\n    source.onmessage = handleMessage;\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected');\n    lastActivity = new Date();\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date();\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n\n    eventCallbacks.forEach(cb => {\n      if (!cb.unfiltered && event.data.indexOf('action') === -1) return;\n      cb(event);\n    });\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer);\n    source.close();\n    setTimeout(init, options.timeout);\n  }\n\n  return {\n    close: () => {\n      clearInterval(timer);\n      source.close();\n    },\n    addMessageListener: function (fn) {\n      listeners.push(fn);\n    }\n  };\n}\n\n_c = EventSourceWrapper;\n\nfunction addMessageListener(cb) {\n  eventCallbacks.push(cb);\n}\n\nfunction getEventSourceWrapper(options) {\n  return EventSourceWrapper(options);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"EventSourceWrapper\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZXJyb3Itb3ZlcmxheS9ldmVudHNvdXJjZS5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELDBCQUFBLEdBQTZCRSxrQkFBN0I7QUFDQUYsNkJBQUEsR0FBZ0NHLHFCQUFoQztBQUNBLE1BQU1DLGNBQWMsR0FBRyxFQUF2Qjs7QUFDQSxTQUFTQyxrQkFBVCxDQUE0QkMsT0FBNUIsRUFBcUM7QUFDakMsTUFBSUMsTUFBSjtBQUNBLE1BQUlDLFlBQVksR0FBRyxJQUFJQyxJQUFKLEVBQW5CO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLEVBQWhCOztBQUNBLE1BQUksQ0FBQ0osT0FBTyxDQUFDSyxPQUFiLEVBQXNCO0FBQ2xCTCxJQUFBQSxPQUFPLENBQUNLLE9BQVIsR0FBa0IsS0FBSyxJQUF2QjtBQUNIOztBQUNEQyxFQUFBQSxJQUFJO0FBQ0osTUFBSUMsS0FBSyxHQUFHQyxXQUFXLENBQUMsWUFBVztBQUMvQixRQUFJLElBQUlMLElBQUosS0FBYUQsWUFBYixHQUE0QkYsT0FBTyxDQUFDSyxPQUF4QyxFQUFpRDtBQUM3Q0ksTUFBQUEsZ0JBQWdCO0FBQ25CO0FBQ0osR0FKc0IsRUFJcEJULE9BQU8sQ0FBQ0ssT0FBUixHQUFrQixDQUpFLENBQXZCOztBQUtBLFdBQVNDLElBQVQsR0FBZ0I7QUFDWkwsSUFBQUEsTUFBTSxHQUFHLElBQUlTLE1BQU0sQ0FBQ0MsV0FBWCxDQUF1QlgsT0FBTyxDQUFDWSxJQUEvQixDQUFUO0FBQ0FYLElBQUFBLE1BQU0sQ0FBQ1ksTUFBUCxHQUFnQkMsWUFBaEI7QUFDQWIsSUFBQUEsTUFBTSxDQUFDYyxPQUFQLEdBQWlCTixnQkFBakI7QUFDQVIsSUFBQUEsTUFBTSxDQUFDZSxTQUFQLEdBQW1CQyxhQUFuQjtBQUNIOztBQUNELFdBQVNILFlBQVQsR0FBd0I7QUFDcEIsUUFBSWQsT0FBTyxDQUFDa0IsR0FBWixFQUFpQkMsT0FBTyxDQUFDRCxHQUFSLENBQVksaUJBQVo7QUFDakJoQixJQUFBQSxZQUFZLEdBQUcsSUFBSUMsSUFBSixFQUFmO0FBQ0g7O0FBQ0QsV0FBU2MsYUFBVCxDQUF1QkcsS0FBdkIsRUFBOEI7QUFDMUJsQixJQUFBQSxZQUFZLEdBQUcsSUFBSUMsSUFBSixFQUFmOztBQUNBLFNBQUksSUFBSWtCLENBQUMsR0FBRyxDQUFaLEVBQWVBLENBQUMsR0FBR2pCLFNBQVMsQ0FBQ2tCLE1BQTdCLEVBQXFDRCxDQUFDLEVBQXRDLEVBQXlDO0FBQ3JDakIsTUFBQUEsU0FBUyxDQUFDaUIsQ0FBRCxDQUFULENBQWFELEtBQWI7QUFDSDs7QUFDRHRCLElBQUFBLGNBQWMsQ0FBQ3lCLE9BQWYsQ0FBd0JDLEVBQUQsSUFBTTtBQUN6QixVQUFJLENBQUNBLEVBQUUsQ0FBQ0MsVUFBSixJQUFrQkwsS0FBSyxDQUFDTSxJQUFOLENBQVdDLE9BQVgsQ0FBbUIsUUFBbkIsTUFBaUMsQ0FBQyxDQUF4RCxFQUEyRDtBQUMzREgsTUFBQUEsRUFBRSxDQUFDSixLQUFELENBQUY7QUFDSCxLQUhEO0FBSUg7O0FBQ0QsV0FBU1gsZ0JBQVQsR0FBNEI7QUFDeEJtQixJQUFBQSxhQUFhLENBQUNyQixLQUFELENBQWI7QUFDQU4sSUFBQUEsTUFBTSxDQUFDNEIsS0FBUDtBQUNBQyxJQUFBQSxVQUFVLENBQUN4QixJQUFELEVBQU9OLE9BQU8sQ0FBQ0ssT0FBZixDQUFWO0FBQ0g7O0FBQ0QsU0FBTztBQUNId0IsSUFBQUEsS0FBSyxFQUFFLE1BQUk7QUFDUEQsTUFBQUEsYUFBYSxDQUFDckIsS0FBRCxDQUFiO0FBQ0FOLE1BQUFBLE1BQU0sQ0FBQzRCLEtBQVA7QUFDSCxLQUpFO0FBS0hqQyxJQUFBQSxrQkFBa0IsRUFBRSxVQUFTbUMsRUFBVCxFQUFhO0FBQzdCM0IsTUFBQUEsU0FBUyxDQUFDNEIsSUFBVixDQUFlRCxFQUFmO0FBQ0g7QUFQRSxHQUFQO0FBU0g7O0tBL0NRaEM7O0FBZ0RULFNBQVNILGtCQUFULENBQTRCNEIsRUFBNUIsRUFBZ0M7QUFDNUIxQixFQUFBQSxjQUFjLENBQUNrQyxJQUFmLENBQW9CUixFQUFwQjtBQUNIOztBQUNELFNBQVMzQixxQkFBVCxDQUErQkcsT0FBL0IsRUFBd0M7QUFDcEMsU0FBT0Qsa0JBQWtCLENBQUNDLE9BQUQsQ0FBekI7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZXJyb3Itb3ZlcmxheS9ldmVudHNvdXJjZS5qcz9hMzQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRNZXNzYWdlTGlzdGVuZXIgPSBhZGRNZXNzYWdlTGlzdGVuZXI7XG5leHBvcnRzLmdldEV2ZW50U291cmNlV3JhcHBlciA9IGdldEV2ZW50U291cmNlV3JhcHBlcjtcbmNvbnN0IGV2ZW50Q2FsbGJhY2tzID0gW107XG5mdW5jdGlvbiBFdmVudFNvdXJjZVdyYXBwZXIob3B0aW9ucykge1xuICAgIHZhciBzb3VyY2U7XG4gICAgdmFyIGxhc3RBY3Rpdml0eSA9IG5ldyBEYXRlKCk7XG4gICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgIGlmICghb3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgIG9wdGlvbnMudGltZW91dCA9IDIwICogMTAwMDtcbiAgICB9XG4gICAgaW5pdCgpO1xuICAgIHZhciB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAobmV3IERhdGUoKSAtIGxhc3RBY3Rpdml0eSA+IG9wdGlvbnMudGltZW91dCkge1xuICAgICAgICAgICAgaGFuZGxlRGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfSwgb3B0aW9ucy50aW1lb3V0IC8gMik7XG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgc291cmNlID0gbmV3IHdpbmRvdy5FdmVudFNvdXJjZShvcHRpb25zLnBhdGgpO1xuICAgICAgICBzb3VyY2Uub25vcGVuID0gaGFuZGxlT25saW5lO1xuICAgICAgICBzb3VyY2Uub25lcnJvciA9IGhhbmRsZURpc2Nvbm5lY3Q7XG4gICAgICAgIHNvdXJjZS5vbm1lc3NhZ2UgPSBoYW5kbGVNZXNzYWdlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVPbmxpbmUoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmxvZykgY29uc29sZS5sb2coJ1tITVJdIGNvbm5lY3RlZCcpO1xuICAgICAgICBsYXN0QWN0aXZpdHkgPSBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgIGxhc3RBY3Rpdml0eSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBldmVudENhbGxiYWNrcy5mb3JFYWNoKChjYik9PntcbiAgICAgICAgICAgIGlmICghY2IudW5maWx0ZXJlZCAmJiBldmVudC5kYXRhLmluZGV4T2YoJ2FjdGlvbicpID09PSAtMSkgcmV0dXJuO1xuICAgICAgICAgICAgY2IoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRGlzY29ubmVjdCgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgIHNvdXJjZS5jbG9zZSgpO1xuICAgICAgICBzZXRUaW1lb3V0KGluaXQsIG9wdGlvbnMudGltZW91dCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNsb3NlOiAoKT0+e1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgICAgICBzb3VyY2UuY2xvc2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkTWVzc2FnZUxpc3RlbmVyOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFkZE1lc3NhZ2VMaXN0ZW5lcihjYikge1xuICAgIGV2ZW50Q2FsbGJhY2tzLnB1c2goY2IpO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRTb3VyY2VXcmFwcGVyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gRXZlbnRTb3VyY2VXcmFwcGVyKG9wdGlvbnMpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHNvdXJjZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhZGRNZXNzYWdlTGlzdGVuZXIiLCJnZXRFdmVudFNvdXJjZVdyYXBwZXIiLCJldmVudENhbGxiYWNrcyIsIkV2ZW50U291cmNlV3JhcHBlciIsIm9wdGlvbnMiLCJzb3VyY2UiLCJsYXN0QWN0aXZpdHkiLCJEYXRlIiwibGlzdGVuZXJzIiwidGltZW91dCIsImluaXQiLCJ0aW1lciIsInNldEludGVydmFsIiwiaGFuZGxlRGlzY29ubmVjdCIsIndpbmRvdyIsIkV2ZW50U291cmNlIiwicGF0aCIsIm9ub3BlbiIsImhhbmRsZU9ubGluZSIsIm9uZXJyb3IiLCJvbm1lc3NhZ2UiLCJoYW5kbGVNZXNzYWdlIiwibG9nIiwiY29uc29sZSIsImV2ZW50IiwiaSIsImxlbmd0aCIsImZvckVhY2giLCJjYiIsInVuZmlsdGVyZWQiLCJkYXRhIiwiaW5kZXhPZiIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInNldFRpbWVvdXQiLCJmbiIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/error-overlay/eventsource.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/event-source-polyfill.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/client/dev/event-source-polyfill.js ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n/* eslint-disable */\n// Improved version of https://github.com/Yaffle/EventSource/\n// Available under MIT License (MIT)\n// Only tries to support IE11 and nothing below\n\nvar document = window.document;\nvar Response1 = window.Response;\nvar TextDecoder1 = window.TextDecoder;\nvar TextEncoder1 = window.TextEncoder;\nvar AbortController1 = window.AbortController;\n\nif (AbortController1 == undefined) {\n  AbortController1 = function () {\n    this.signal = null;\n\n    this.abort = function () {};\n  };\n}\n\nfunction TextDecoderPolyfill() {\n  this.bitsNeeded = 0;\n  this.codePoint = 0;\n}\n\n_c = TextDecoderPolyfill;\n\nTextDecoderPolyfill.prototype.decode = function (octets) {\n  function valid(codePoint, shift, octetsCount) {\n    if (octetsCount === 1) {\n      return codePoint >= 128 >> shift && codePoint << shift <= 2047;\n    }\n\n    if (octetsCount === 2) {\n      return codePoint >= 2048 >> shift && codePoint << shift <= 55295 || codePoint >= 57344 >> shift && codePoint << shift <= 65535;\n    }\n\n    if (octetsCount === 3) {\n      return codePoint >= 65536 >> shift && codePoint << shift <= 1114111;\n    }\n\n    throw new Error();\n  }\n\n  function octetsCount(bitsNeeded, codePoint) {\n    if (bitsNeeded === 6 * 1) {\n      return codePoint >> 6 > 15 ? 3 : codePoint > 31 ? 2 : 1;\n    }\n\n    if (bitsNeeded === 6 * 2) {\n      return codePoint > 15 ? 3 : 2;\n    }\n\n    if (bitsNeeded === 6 * 3) {\n      return 3;\n    }\n\n    throw new Error();\n  }\n\n  var REPLACER = 65533;\n  var string = '';\n  var bitsNeeded = this.bitsNeeded;\n  var codePoint = this.codePoint;\n\n  for (var i = 0; i < octets.length; i += 1) {\n    var octet = octets[i];\n\n    if (bitsNeeded !== 0) {\n      if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n        string += String.fromCharCode(codePoint);\n      }\n    }\n\n    if (bitsNeeded === 0) {\n      if (octet >= 0 && octet <= 127) {\n        bitsNeeded = 0;\n        codePoint = octet;\n      } else if (octet >= 192 && octet <= 223) {\n        bitsNeeded = 6 * 1;\n        codePoint = octet & 31;\n      } else if (octet >= 224 && octet <= 239) {\n        bitsNeeded = 6 * 2;\n        codePoint = octet & 15;\n      } else if (octet >= 240 && octet <= 247) {\n        bitsNeeded = 6 * 3;\n        codePoint = octet & 7;\n      } else {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n\n      if (bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n    } else {\n      bitsNeeded -= 6;\n      codePoint = codePoint << 6 | octet & 63;\n    }\n\n    if (bitsNeeded === 0) {\n      if (codePoint <= 65535) {\n        string += String.fromCharCode(codePoint);\n      } else {\n        string += String.fromCharCode(55296 + (codePoint - 65535 - 1 >> 10));\n        string += String.fromCharCode(56320 + (codePoint - 65535 - 1 & 1023));\n      }\n    }\n  }\n\n  this.bitsNeeded = bitsNeeded;\n  this.codePoint = codePoint;\n  return string;\n}; // Firefox < 38 throws an error with stream option\n\n\nvar supportsStreamOption = function () {\n  try {\n    return new TextDecoder1().decode(new TextEncoder1().encode('test'), {\n      stream: true\n    }) === 'test';\n  } catch (error) {\n    console.log(error);\n  }\n\n  return false;\n}; // IE, Edge\n\n\nif (TextDecoder1 == undefined || TextEncoder1 == undefined || !supportsStreamOption()) {\n  TextDecoder1 = TextDecoderPolyfill;\n}\n\nvar k = function () {};\n\nfunction XHRWrapper(xhr) {\n  this.withCredentials = false;\n  this.responseType = '';\n  this.readyState = 0;\n  this.status = 0;\n  this.statusText = '';\n  this.responseText = '';\n  this.onprogress = k;\n  this.onreadystatechange = k;\n  this._contentType = '';\n  this._xhr = xhr;\n  this._sendTimeout = 0;\n  this._abort = k;\n}\n\n_c2 = XHRWrapper;\n\nXHRWrapper.prototype.open = function (method, url) {\n  this._abort(true);\n\n  var that = this;\n  var xhr = this._xhr;\n  var state = 1;\n  var timeout = 0;\n\n  this._abort = function (silent) {\n    if (that._sendTimeout !== 0) {\n      clearTimeout(that._sendTimeout);\n      that._sendTimeout = 0;\n    }\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n      xhr.onload = k;\n      xhr.onerror = k;\n      xhr.onabort = k;\n      xhr.onprogress = k;\n      xhr.onreadystatechange = k; // IE 8 - 9: XDomainRequest#abort() does not fire any event\n      // Opera < 10: XMLHttpRequest#abort() does not fire any event\n\n      xhr.abort();\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      if (!silent) {\n        that.readyState = 4;\n        that.onreadystatechange();\n      }\n    }\n\n    state = 0;\n  };\n\n  var onStart = function () {\n    if (state === 1) {\n      // state = 2;\n      var status = 0;\n      var statusText = '';\n      var contentType = undefined;\n\n      if (!('contentType' in xhr)) {\n        try {\n          status = xhr.status;\n          statusText = xhr.statusText;\n          contentType = xhr.getResponseHeader('Content-Type');\n        } catch (error) {\n          // IE < 10 throws exception for `xhr.status` when xhr.readyState === 2 || xhr.readyState === 3\n          // Opera < 11 throws exception for `xhr.status` when xhr.readyState === 2\n          // https://bugs.webkit.org/show_bug.cgi?id=29121\n          status = 0;\n          statusText = '';\n          contentType = undefined; // Firefox < 14, Chrome ?, Safari ?\n          // https://bugs.webkit.org/show_bug.cgi?id=29658\n          // https://bugs.webkit.org/show_bug.cgi?id=77854\n        }\n      } else {\n        status = 200;\n        statusText = 'OK';\n        contentType = xhr.contentType;\n      }\n\n      if (status !== 0) {\n        state = 2;\n        that.readyState = 2;\n        that.status = status;\n        that.statusText = statusText;\n        that._contentType = contentType;\n        that.onreadystatechange();\n      }\n    }\n  };\n\n  var onProgress = function () {\n    onStart();\n\n    if (state === 2 || state === 3) {\n      state = 3;\n      var responseText = '';\n\n      try {\n        responseText = xhr.responseText;\n      } catch (error) {// IE 8 - 9 with XMLHttpRequest\n      }\n\n      that.readyState = 3;\n      that.responseText = responseText;\n      that.onprogress();\n    }\n  };\n\n  var onFinish = function () {\n    // Firefox 52 fires \"readystatechange\" (xhr.readyState === 4) without final \"readystatechange\" (xhr.readyState === 3)\n    // IE 8 fires \"onload\" without \"onprogress\"\n    onProgress();\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      that.readyState = 4;\n      that.onreadystatechange();\n    }\n  };\n\n  var onReadyStateChange = function () {\n    if (xhr != undefined) {\n      // Opera 12\n      if (xhr.readyState === 4) {\n        onFinish();\n      } else if (xhr.readyState === 3) {\n        onProgress();\n      } else if (xhr.readyState === 2) {\n        onStart();\n      }\n    }\n  };\n\n  var onTimeout = function () {\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 500);\n\n    if (xhr.readyState === 3) {\n      onProgress();\n    }\n  }; // XDomainRequest#abort removes onprogress, onerror, onload\n\n\n  xhr.onload = onFinish;\n  xhr.onerror = onFinish; // improper fix to match Firefox behavior, but it is better than just ignore abort\n  // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n  // https://code.google.com/p/chromium/issues/detail?id=153570\n  // IE 8 fires \"onload\" without \"onprogress\n\n  xhr.onabort = onFinish; // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\n\n  if (!('sendAsBinary' in XMLHttpRequest.prototype) && !('mozAnon' in XMLHttpRequest.prototype)) {\n    xhr.onprogress = onProgress;\n  } // IE 8 - 9 (XMLHTTPRequest)\n  // Opera < 12\n  // Firefox < 3.5\n  // Firefox 3.5 - 3.6 - ? < 9.0\n  // onprogress is not fired sometimes or delayed\n  // see also #64\n\n\n  xhr.onreadystatechange = onReadyStateChange;\n\n  if ('contentType' in xhr) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + 'padding=true';\n  }\n\n  xhr.open(method, url, true);\n\n  if ('readyState' in xhr) {\n    // workaround for Opera 12 issue with \"progress\" events\n    // #91\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 0);\n  }\n};\n\nXHRWrapper.prototype.abort = function () {\n  this._abort(false);\n};\n\nXHRWrapper.prototype.getResponseHeader = function (name) {\n  return this._contentType;\n};\n\nXHRWrapper.prototype.setRequestHeader = function (name, value) {\n  var xhr = this._xhr;\n\n  if ('setRequestHeader' in xhr) {\n    xhr.setRequestHeader(name, value);\n  }\n};\n\nXHRWrapper.prototype.getAllResponseHeaders = function () {\n  return this._xhr.getAllResponseHeaders != undefined ? this._xhr.getAllResponseHeaders() : '';\n};\n\nXHRWrapper.prototype.send = function () {\n  // loading indicator in Safari < ? (6), Chrome < 14, Firefox\n  if (!('ontimeout' in XMLHttpRequest.prototype) && document != undefined && document.readyState != undefined && document.readyState !== 'complete') {\n    var that = this;\n    that._sendTimeout = setTimeout(function () {\n      that._sendTimeout = 0;\n      that.send();\n    }, 4);\n    return;\n  }\n\n  var xhr = this._xhr; // withCredentials should be set after \"open\" for Safari and Chrome (< 19 ?)\n\n  xhr.withCredentials = this.withCredentials;\n  xhr.responseType = this.responseType;\n\n  try {\n    // xhr.send(); throws \"Not enough arguments\" in Firefox 3.0\n    xhr.send(undefined);\n  } catch (error1) {\n    // Safari 5.1.7, Opera 12\n    throw error1;\n  }\n};\n\nfunction toLowerCase(name) {\n  return name.replace(/[A-Z]/g, function (c) {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n}\n\nfunction HeadersPolyfill(all) {\n  // Get headers: implemented according to mozilla's example code: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\n  var map = Object.create(null);\n  var array = all.split('\\r\\n');\n\n  for (var i = 0; i < array.length; i += 1) {\n    var line = array[i];\n    var parts = line.split(': ');\n    var name = parts.shift();\n    var value = parts.join(': ');\n    map[toLowerCase(name)] = value;\n  }\n\n  this._map = map;\n}\n\n_c3 = HeadersPolyfill;\n\nHeadersPolyfill.prototype.get = function (name) {\n  return this._map[toLowerCase(name)];\n};\n\nfunction XHRTransport() {}\n\n_c4 = XHRTransport;\n\nXHRTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n  xhr.open('GET', url);\n  var offset = 0;\n\n  xhr.onprogress = function () {\n    var responseText = xhr.responseText;\n    var chunk = responseText.slice(offset);\n    offset += chunk.length;\n    onProgressCallback(chunk);\n  };\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 2) {\n      var status = xhr.status;\n      var statusText = xhr.statusText;\n      var contentType = xhr.getResponseHeader('Content-Type');\n      var headers1 = xhr.getAllResponseHeaders();\n      onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers1), function () {\n        xhr.abort();\n      });\n    } else if (xhr.readyState === 4) {\n      onFinishCallback();\n    }\n  };\n\n  xhr.withCredentials = withCredentials;\n  xhr.responseType = 'text';\n\n  for (var name in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, name)) {\n      xhr.setRequestHeader(name, headers[name]);\n    }\n  }\n\n  xhr.send();\n};\n\nfunction HeadersWrapper(headers2) {\n  this._headers = headers2;\n}\n\n_c5 = HeadersWrapper;\n\nHeadersWrapper.prototype.get = function (name) {\n  return this._headers.get(name);\n};\n\nfunction FetchTransport() {}\n\n_c6 = FetchTransport;\n\nFetchTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers2) {\n  var controller = new AbortController1();\n  var signal = controller.signal // see #120\n  ;\n  var textDecoder = new TextDecoder1();\n  fetch(url, {\n    headers: headers2,\n    credentials: withCredentials ? 'include' : 'same-origin',\n    signal: signal,\n    cache: 'no-store'\n  }).then(function (response) {\n    var reader = response.body.getReader();\n    onStartCallback(response.status, response.statusText, response.headers.get('Content-Type'), new HeadersWrapper(response.headers), function () {\n      controller.abort();\n      reader.cancel();\n    });\n    return new Promise(function (resolve, reject) {\n      var readNextChunk = function () {\n        reader.read().then(function (result) {\n          if (result.done) {\n            // Note: bytes in textDecoder are ignored\n            resolve(undefined);\n          } else {\n            var chunk = textDecoder.decode(result.value, {\n              stream: true\n            });\n            onProgressCallback(chunk);\n            readNextChunk();\n          }\n        })['catch'](function (error) {\n          reject(error);\n        });\n      };\n\n      readNextChunk();\n    });\n  }).then(function (result) {\n    onFinishCallback();\n    return result;\n  }, function (error) {\n    onFinishCallback();\n    return Promise.reject(error);\n  });\n};\n\nfunction EventTarget1() {\n  this._listeners = Object.create(null);\n}\n\n_c7 = EventTarget1;\n\nfunction throwError(e) {\n  setTimeout(function () {\n    throw e;\n  }, 0);\n}\n\nEventTarget1.prototype.dispatchEvent = function (event) {\n  event.target = this;\n  var typeListeners = this._listeners[event.type];\n\n  if (typeListeners != undefined) {\n    var length = typeListeners.length;\n\n    for (var i = 0; i < length; i += 1) {\n      var listener = typeListeners[i];\n\n      try {\n        if (typeof listener.handleEvent === 'function') {\n          listener.handleEvent(event);\n        } else {\n          listener.call(this, event);\n        }\n      } catch (e) {\n        throwError(e);\n      }\n    }\n  }\n};\n\nEventTarget1.prototype.addEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners == undefined) {\n    typeListeners = [];\n    listeners[type] = typeListeners;\n  }\n\n  var found = false;\n\n  for (var i = 0; i < typeListeners.length; i += 1) {\n    if (typeListeners[i] === listener) {\n      found = true;\n    }\n  }\n\n  if (!found) {\n    typeListeners.push(listener);\n  }\n};\n\nEventTarget1.prototype.removeEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners != undefined) {\n    var filtered = [];\n\n    for (var i = 0; i < typeListeners.length; i += 1) {\n      if (typeListeners[i] !== listener) {\n        filtered.push(typeListeners[i]);\n      }\n    }\n\n    if (filtered.length === 0) {\n      delete listeners[type];\n    } else {\n      listeners[type] = filtered;\n    }\n  }\n};\n\nfunction Event1(type) {\n  this.type = type;\n  this.target = undefined;\n}\n\n_c8 = Event1;\n\nfunction MessageEvent1(type, options) {\n  Event1.call(this, type);\n  this.data = options.data;\n  this.lastEventId = options.lastEventId;\n}\n\n_c9 = MessageEvent1;\nMessageEvent1.prototype = Object.create(Event1.prototype);\n\nfunction ConnectionEvent(type, options) {\n  Event1.call(this, type);\n  this.status = options.status;\n  this.statusText = options.statusText;\n  this.headers = options.headers;\n}\n\n_c10 = ConnectionEvent;\nConnectionEvent.prototype = Object.create(Event1.prototype);\nvar WAITING = -1;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSED = 2;\nvar AFTER_CR = -1;\nvar FIELD_START = 0;\nvar FIELD = 1;\nvar VALUE_START = 2;\nvar VALUE = 3;\nvar contentTypeRegExp = /^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i;\nvar MINIMUM_DURATION = 1000;\nvar MAXIMUM_DURATION = 18000000;\n\nvar parseDuration = function (value, def) {\n  var n = parseInt(value, 10);\n\n  if (n !== n) {\n    n = def;\n  }\n\n  return clampDuration(n);\n};\n\nvar clampDuration = function (n) {\n  return Math.min(Math.max(n, MINIMUM_DURATION), MAXIMUM_DURATION);\n};\n\nvar fire = function (that, f, event) {\n  try {\n    if (typeof f === 'function') {\n      f.call(that, event);\n    }\n  } catch (e) {\n    throwError(e);\n  }\n};\n\nfunction EventSourcePolyfill(url, options) {\n  EventTarget1.call(this);\n  this.onopen = undefined;\n  this.onmessage = undefined;\n  this.onerror = undefined;\n  this.url = undefined;\n  this.readyState = undefined;\n  this.withCredentials = undefined;\n  this._close = undefined;\n  start(this, url, options);\n}\n\n_c11 = EventSourcePolyfill;\nvar isFetchSupported = fetch != undefined && Response1 != undefined && 'body' in Response1.prototype;\n\nfunction start(es, url, options) {\n  url = String(url);\n  var withCredentials = options != undefined && Boolean(options.withCredentials);\n  var initialRetry = clampDuration(1000);\n  var heartbeatTimeout = options != undefined && options.heartbeatTimeout != undefined ? parseDuration(options.heartbeatTimeout, 45000) : clampDuration(45000);\n  var lastEventId = '';\n  var retry = initialRetry;\n  var wasActivity = false;\n  var headers2 = options != undefined && options.headers != undefined ? JSON.parse(JSON.stringify(options.headers)) : undefined;\n  var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : XMLHttpRequest;\n  var xhr = isFetchSupported && !(options != undefined && options.Transport != undefined) ? undefined : new XHRWrapper(new CurrentTransport());\n  var transport = xhr == undefined ? new FetchTransport() : new XHRTransport();\n  var cancelFunction = undefined;\n  var timeout = 0;\n  var currentState = WAITING;\n  var dataBuffer = '';\n  var lastEventIdBuffer = '';\n  var eventTypeBuffer = '';\n  var textBuffer = '';\n  var state = FIELD_START;\n  var fieldStart = 0;\n  var valueStart = 0;\n\n  var onStart = function (status, statusText, contentType, headers3, cancel) {\n    if (currentState === CONNECTING) {\n      cancelFunction = cancel;\n\n      if (status === 200 && contentType != undefined && contentTypeRegExp.test(contentType)) {\n        currentState = OPEN;\n        wasActivity = true;\n        retry = initialRetry;\n        es.readyState = OPEN;\n        var event = new ConnectionEvent('open', {\n          status: status,\n          statusText: statusText,\n          headers: headers3\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onopen, event);\n      } else {\n        var message = '';\n\n        if (status !== 200) {\n          if (statusText) {\n            statusText = statusText.replace(/\\s+/g, ' ');\n          }\n\n          message = \"EventSource's response has a status \" + status + ' ' + statusText + ' that is not 200. Aborting the connection.';\n        } else {\n          message = \"EventSource's response has a Content-Type specifying an unsupported type: \" + (contentType == undefined ? '-' : contentType.replace(/\\s+/g, ' ')) + '. Aborting the connection.';\n        }\n\n        throwError(new Error(message));\n        close();\n        var event = new ConnectionEvent('error', {\n          status: status,\n          statusText: statusText,\n          headers: headers3\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onerror, event);\n      }\n    }\n  };\n\n  var onProgress = function (textChunk) {\n    if (currentState === OPEN) {\n      var n = -1;\n\n      for (var i = 0; i < textChunk.length; i += 1) {\n        var c = textChunk.charCodeAt(i);\n\n        if (c === '\\n'.charCodeAt(0) || c === '\\r'.charCodeAt(0)) {\n          n = i;\n        }\n      }\n\n      var chunk = (n !== -1 ? textBuffer : '') + textChunk.slice(0, n + 1);\n      textBuffer = (n === -1 ? textBuffer : '') + textChunk.slice(n + 1);\n\n      if (chunk !== '') {\n        wasActivity = true;\n      }\n\n      for (var position = 0; position < chunk.length; position += 1) {\n        var c = chunk.charCodeAt(position);\n\n        if (state === AFTER_CR && c === '\\n'.charCodeAt(0)) {\n          state = FIELD_START;\n        } else {\n          if (state === AFTER_CR) {\n            state = FIELD_START;\n          }\n\n          if (c === '\\r'.charCodeAt(0) || c === '\\n'.charCodeAt(0)) {\n            if (state !== FIELD_START) {\n              if (state === FIELD) {\n                valueStart = position + 1;\n              }\n\n              var field = chunk.slice(fieldStart, valueStart - 1);\n              var value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === ' '.charCodeAt(0) ? 1 : 0), position);\n\n              if (field === 'data') {\n                dataBuffer += '\\n';\n                dataBuffer += value;\n              } else if (field === 'id') {\n                lastEventIdBuffer = value;\n              } else if (field === 'event') {\n                eventTypeBuffer = value;\n              } else if (field === 'retry') {\n                initialRetry = parseDuration(value, initialRetry);\n                retry = initialRetry;\n              } else if (field === 'heartbeatTimeout') {\n                heartbeatTimeout = parseDuration(value, heartbeatTimeout);\n\n                if (timeout !== 0) {\n                  clearTimeout(timeout);\n                  timeout = setTimeout(function () {\n                    onTimeout();\n                  }, heartbeatTimeout);\n                }\n              }\n            }\n\n            if (state === FIELD_START) {\n              if (dataBuffer !== '') {\n                lastEventId = lastEventIdBuffer;\n\n                if (eventTypeBuffer === '') {\n                  eventTypeBuffer = 'message';\n                }\n\n                var event = new MessageEvent1(eventTypeBuffer, {\n                  data: dataBuffer.slice(1),\n                  lastEventId: lastEventIdBuffer\n                });\n                es.dispatchEvent(event);\n\n                if (eventTypeBuffer === 'message') {\n                  fire(es, es.onmessage, event);\n                }\n\n                if (currentState === CLOSED) {\n                  return;\n                }\n              }\n\n              dataBuffer = '';\n              eventTypeBuffer = '';\n            }\n\n            state = c === '\\r'.charCodeAt(0) ? AFTER_CR : FIELD_START;\n          } else {\n            if (state === FIELD_START) {\n              fieldStart = position;\n              state = FIELD;\n            }\n\n            if (state === FIELD) {\n              if (c === ':'.charCodeAt(0)) {\n                valueStart = position + 1;\n                state = VALUE_START;\n              }\n            } else if (state === VALUE_START) {\n              state = VALUE;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  var onFinish = function () {\n    if (currentState === OPEN || currentState === CONNECTING) {\n      currentState = WAITING;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      timeout = setTimeout(function () {\n        onTimeout();\n      }, retry);\n      retry = clampDuration(Math.min(initialRetry * 16, retry * 2));\n      es.readyState = CONNECTING;\n      var event = new Event1('error');\n      es.dispatchEvent(event);\n      fire(es, es.onerror, event);\n    }\n  };\n\n  var close = function () {\n    currentState = CLOSED;\n\n    if (cancelFunction != undefined) {\n      cancelFunction();\n      cancelFunction = undefined;\n    }\n\n    if (timeout !== 0) {\n      clearTimeout(timeout);\n      timeout = 0;\n    }\n\n    es.readyState = CLOSED;\n  };\n\n  var onTimeout = function () {\n    timeout = 0;\n\n    if (currentState !== WAITING) {\n      if (!wasActivity && cancelFunction != undefined) {\n        throwError(new Error('No activity within ' + heartbeatTimeout + ' milliseconds. Reconnecting.'));\n        cancelFunction();\n        cancelFunction = undefined;\n      } else {\n        wasActivity = false;\n        timeout = setTimeout(function () {\n          onTimeout();\n        }, heartbeatTimeout);\n      }\n\n      return;\n    }\n\n    wasActivity = false;\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, heartbeatTimeout);\n    currentState = CONNECTING;\n    dataBuffer = '';\n    eventTypeBuffer = '';\n    lastEventIdBuffer = lastEventId;\n    textBuffer = '';\n    fieldStart = 0;\n    valueStart = 0;\n    state = FIELD_START; // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\n    // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\n\n    var requestURL = url;\n\n    if (url.slice(0, 5) !== 'data:' && url.slice(0, 5) !== 'blob:') {\n      if (lastEventId !== '') {\n        requestURL += (url.indexOf('?') === -1 ? '?' : '&') + 'lastEventId=' + encodeURIComponent(lastEventId);\n      }\n    }\n\n    var requestHeaders = {};\n    requestHeaders['Accept'] = 'text/event-stream';\n\n    if (headers2 != undefined) {\n      for (var name in headers2) {\n        if (Object.prototype.hasOwnProperty.call(headers2, name)) {\n          requestHeaders[name] = headers2[name];\n        }\n      }\n    }\n\n    try {\n      transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials, requestHeaders);\n    } catch (error) {\n      close();\n      throw error;\n    }\n  };\n\n  es.url = url;\n  es.readyState = CONNECTING;\n  es.withCredentials = withCredentials;\n  es._close = close;\n  onTimeout();\n}\n\nEventSourcePolyfill.prototype = Object.create(EventTarget1.prototype);\nEventSourcePolyfill.prototype.CONNECTING = CONNECTING;\nEventSourcePolyfill.prototype.OPEN = OPEN;\nEventSourcePolyfill.prototype.CLOSED = CLOSED;\n\nEventSourcePolyfill.prototype.close = function () {\n  this._close();\n};\n\nEventSourcePolyfill.CONNECTING = CONNECTING;\nEventSourcePolyfill.OPEN = OPEN;\nEventSourcePolyfill.CLOSED = CLOSED;\nEventSourcePolyfill.prototype.withCredentials = undefined;\nvar _default = EventSourcePolyfill;\nexports.default = _default;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"TextDecoderPolyfill\");\n$RefreshReg$(_c2, \"XHRWrapper\");\n$RefreshReg$(_c3, \"HeadersPolyfill\");\n$RefreshReg$(_c4, \"XHRTransport\");\n$RefreshReg$(_c5, \"HeadersWrapper\");\n$RefreshReg$(_c6, \"FetchTransport\");\n$RefreshReg$(_c7, \"EventTarget1\");\n$RefreshReg$(_c8, \"Event1\");\n$RefreshReg$(_c9, \"MessageEvent1\");\n$RefreshReg$(_c10, \"ConnectionEvent\");\n$RefreshReg$(_c11, \"EventSourcePolyfill\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZXZlbnQtc291cmNlLXBvbHlmaWxsLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsZUFBQSxHQUFrQixLQUFLLENBQXZCO0FBQ0E7QUFBcUI7QUFDckI7QUFDQTs7QUFDQSxJQUFJRyxRQUFRLEdBQUdDLE1BQU0sQ0FBQ0QsUUFBdEI7QUFDQSxJQUFJRSxTQUFTLEdBQUdELE1BQU0sQ0FBQ0UsUUFBdkI7QUFDQSxJQUFJQyxZQUFZLEdBQUdILE1BQU0sQ0FBQ0ksV0FBMUI7QUFDQSxJQUFJQyxZQUFZLEdBQUdMLE1BQU0sQ0FBQ00sV0FBMUI7QUFDQSxJQUFJQyxnQkFBZ0IsR0FBR1AsTUFBTSxDQUFDUSxlQUE5Qjs7QUFDQSxJQUFJRCxnQkFBZ0IsSUFBSUUsU0FBeEIsRUFBbUM7QUFDL0JGLEVBQUFBLGdCQUFnQixHQUFHLFlBQVc7QUFDMUIsU0FBS0csTUFBTCxHQUFjLElBQWQ7O0FBQ0EsU0FBS0MsS0FBTCxHQUFhLFlBQVcsQ0FDdkIsQ0FERDtBQUVILEdBSkQ7QUFLSDs7QUFDRCxTQUFTQyxtQkFBVCxHQUErQjtBQUMzQixPQUFLQyxVQUFMLEdBQWtCLENBQWxCO0FBQ0EsT0FBS0MsU0FBTCxHQUFpQixDQUFqQjtBQUNIOztLQUhRRjs7QUFJVEEsbUJBQW1CLENBQUNHLFNBQXBCLENBQThCQyxNQUE5QixHQUF1QyxVQUFTQyxNQUFULEVBQWlCO0FBQ3BELFdBQVNDLEtBQVQsQ0FBZUosU0FBZixFQUEwQkssS0FBMUIsRUFBaUNDLFdBQWpDLEVBQThDO0FBQzFDLFFBQUlBLFdBQVcsS0FBSyxDQUFwQixFQUF1QjtBQUNuQixhQUFPTixTQUFTLElBQUksT0FBT0ssS0FBcEIsSUFBNkJMLFNBQVMsSUFBSUssS0FBYixJQUFzQixJQUExRDtBQUNIOztBQUNELFFBQUlDLFdBQVcsS0FBSyxDQUFwQixF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QUFHQUgsbUJBQW1CLENBQUNyQixVQUFwQixHQUFpQ0EsVUFBakM7QUFDQXFCLG1CQUFtQixDQUFDcEIsSUFBcEIsR0FBMkJBLElBQTNCO0FBQ0FvQixtQkFBbUIsQ0FBQ25CLE1BQXBCLEdBQTZCQSxNQUE3QjtBQUNBbUIsbUJBQW1CLENBQUMxSixTQUFwQixDQUE4QnVCLGVBQTlCLEdBQWdEN0IsU0FBaEQ7QUFDQSxJQUFJb00sUUFBUSxHQUFHcEMsbUJBQWY7QUFDQTdLLGVBQUEsR0FBa0JpTixRQUFsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZXZlbnQtc291cmNlLXBvbHlmaWxsLmpzP2ZmNTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vKiBlc2xpbnQtZGlzYWJsZSAqLyAvLyBJbXByb3ZlZCB2ZXJzaW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9ZYWZmbGUvRXZlbnRTb3VyY2UvXG4vLyBBdmFpbGFibGUgdW5kZXIgTUlUIExpY2Vuc2UgKE1JVClcbi8vIE9ubHkgdHJpZXMgdG8gc3VwcG9ydCBJRTExIGFuZCBub3RoaW5nIGJlbG93XG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG52YXIgUmVzcG9uc2UxID0gd2luZG93LlJlc3BvbnNlO1xudmFyIFRleHREZWNvZGVyMSA9IHdpbmRvdy5UZXh0RGVjb2RlcjtcbnZhciBUZXh0RW5jb2RlcjEgPSB3aW5kb3cuVGV4dEVuY29kZXI7XG52YXIgQWJvcnRDb250cm9sbGVyMSA9IHdpbmRvdy5BYm9ydENvbnRyb2xsZXI7XG5pZiAoQWJvcnRDb250cm9sbGVyMSA9PSB1bmRlZmluZWQpIHtcbiAgICBBYm9ydENvbnRyb2xsZXIxID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2lnbmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB9O1xuICAgIH07XG59XG5mdW5jdGlvbiBUZXh0RGVjb2RlclBvbHlmaWxsKCkge1xuICAgIHRoaXMuYml0c05lZWRlZCA9IDA7XG4gICAgdGhpcy5jb2RlUG9pbnQgPSAwO1xufVxuVGV4dERlY29kZXJQb2x5ZmlsbC5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24ob2N0ZXRzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWQoY29kZVBvaW50LCBzaGlmdCwgb2N0ZXRzQ291bnQpIHtcbiAgICAgICAgaWYgKG9jdGV0c0NvdW50ID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gY29kZVBvaW50ID49IDEyOCA+PiBzaGlmdCAmJiBjb2RlUG9pbnQgPDwgc2hpZnQgPD0gMjA0NztcbiAgICAgICAgfVxuICAgICAgICBpZiAob2N0ZXRzQ291bnQgPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2RlUG9pbnQgPj0gMjA0OCA+PiBzaGlmdCAmJiBjb2RlUG9pbnQgPDwgc2hpZnQgPD0gNTUyOTUgfHwgY29kZVBvaW50ID49IDU3MzQ0ID4+IHNoaWZ0ICYmIGNvZGVQb2ludCA8PCBzaGlmdCA8PSA2NTUzNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2N0ZXRzQ291bnQgPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2RlUG9pbnQgPj0gNjU1MzYgPj4gc2hpZnQgJiYgY29kZVBvaW50IDw8IHNoaWZ0IDw9IDExMTQxMTE7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9jdGV0c0NvdW50KGJpdHNOZWVkZWQsIGNvZGVQb2ludCkge1xuICAgICAgICBpZiAoYml0c05lZWRlZCA9PT0gNiAqIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2RlUG9pbnQgPj4gNiA+IDE1ID8gMyA6IGNvZGVQb2ludCA+IDMxID8gMiA6IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpdHNOZWVkZWQgPT09IDYgKiAyKSB7XG4gICAgICAgICAgICByZXR1cm4gY29kZVBvaW50ID4gMTUgPyAzIDogMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYml0c05lZWRlZCA9PT0gNiAqIDMpIHtcbiAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICB2YXIgUkVQTEFDRVIgPSA2NTUzMztcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgdmFyIGJpdHNOZWVkZWQgPSB0aGlzLmJpdHNOZWVkZWQ7XG4gICAgdmFyIGNvZGVQb2ludCA9IHRoaXMuY29kZVBvaW50O1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBvY3RldHMubGVuZ3RoOyBpICs9IDEpe1xuICAgICAgICB2YXIgb2N0ZXQgPSBvY3RldHNbaV07XG4gICAgICAgIGlmIChiaXRzTmVlZGVkICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAob2N0ZXQgPCAxMjggfHwgb2N0ZXQgPiAxOTEgfHwgIXZhbGlkKGNvZGVQb2ludCA8PCA2IHwgb2N0ZXQgJiA2MywgYml0c05lZWRlZCAtIDYsIG9jdGV0c0NvdW50KGJpdHNOZWVkZWQsIGNvZGVQb2ludCkpKSB7XG4gICAgICAgICAgICAgICAgYml0c05lZWRlZCA9IDA7XG4gICAgICAgICAgICAgICAgY29kZVBvaW50ID0gUkVQTEFDRVI7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYml0c05lZWRlZCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKG9jdGV0ID49IDAgJiYgb2N0ZXQgPD0gMTI3KSB7XG4gICAgICAgICAgICAgICAgYml0c05lZWRlZCA9IDA7XG4gICAgICAgICAgICAgICAgY29kZVBvaW50ID0gb2N0ZXQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9jdGV0ID49IDE5MiAmJiBvY3RldCA8PSAyMjMpIHtcbiAgICAgICAgICAgICAgICBiaXRzTmVlZGVkID0gNiAqIDE7XG4gICAgICAgICAgICAgICAgY29kZVBvaW50ID0gb2N0ZXQgJiAzMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2N0ZXQgPj0gMjI0ICYmIG9jdGV0IDw9IDIzOSkge1xuICAgICAgICAgICAgICAgIGJpdHNOZWVkZWQgPSA2ICogMjtcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSBvY3RldCAmIDE1O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvY3RldCA+PSAyNDAgJiYgb2N0ZXQgPD0gMjQ3KSB7XG4gICAgICAgICAgICAgICAgYml0c05lZWRlZCA9IDYgKiAzO1xuICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IG9jdGV0ICYgNztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYml0c05lZWRlZCA9IDA7XG4gICAgICAgICAgICAgICAgY29kZVBvaW50ID0gUkVQTEFDRVI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYml0c05lZWRlZCAhPT0gMCAmJiAhdmFsaWQoY29kZVBvaW50LCBiaXRzTmVlZGVkLCBvY3RldHNDb3VudChiaXRzTmVlZGVkLCBjb2RlUG9pbnQpKSkge1xuICAgICAgICAgICAgICAgIGJpdHNOZWVkZWQgPSAwO1xuICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IFJFUExBQ0VSO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYml0c05lZWRlZCAtPSA2O1xuICAgICAgICAgICAgY29kZVBvaW50ID0gY29kZVBvaW50IDw8IDYgfCBvY3RldCAmIDYzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiaXRzTmVlZGVkID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoY29kZVBvaW50IDw9IDY1NTM1KSB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgKyAoY29kZVBvaW50IC0gNjU1MzUgLSAxID4+IDEwKSk7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTYzMjAgKyAoY29kZVBvaW50IC0gNjU1MzUgLSAxICYgMTAyMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuYml0c05lZWRlZCA9IGJpdHNOZWVkZWQ7XG4gICAgdGhpcy5jb2RlUG9pbnQgPSBjb2RlUG9pbnQ7XG4gICAgcmV0dXJuIHN0cmluZztcbn07XG4vLyBGaXJlZm94IDwgMzggdGhyb3dzIGFuIGVycm9yIHdpdGggc3RyZWFtIG9wdGlvblxudmFyIHN1cHBvcnRzU3RyZWFtT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcjEoKS5kZWNvZGUobmV3IFRleHRFbmNvZGVyMSgpLmVuY29kZSgndGVzdCcpLCB7XG4gICAgICAgICAgICBzdHJlYW06IHRydWVcbiAgICAgICAgfSkgPT09ICd0ZXN0JztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG4vLyBJRSwgRWRnZVxuaWYgKFRleHREZWNvZGVyMSA9PSB1bmRlZmluZWQgfHwgVGV4dEVuY29kZXIxID09IHVuZGVmaW5lZCB8fCAhc3VwcG9ydHNTdHJlYW1PcHRpb24oKSkge1xuICAgIFRleHREZWNvZGVyMSA9IFRleHREZWNvZGVyUG9seWZpbGw7XG59XG52YXIgayA9IGZ1bmN0aW9uKCkge1xufTtcbmZ1bmN0aW9uIFhIUldyYXBwZXIoeGhyKSB7XG4gICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcbiAgICB0aGlzLnJlc3BvbnNlVHlwZSA9ICcnO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IDA7XG4gICAgdGhpcy5zdGF0dXMgPSAwO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9ICcnO1xuICAgIHRoaXMucmVzcG9uc2VUZXh0ID0gJyc7XG4gICAgdGhpcy5vbnByb2dyZXNzID0gaztcbiAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGs7XG4gICAgdGhpcy5fY29udGVudFR5cGUgPSAnJztcbiAgICB0aGlzLl94aHIgPSB4aHI7XG4gICAgdGhpcy5fc2VuZFRpbWVvdXQgPSAwO1xuICAgIHRoaXMuX2Fib3J0ID0gaztcbn1cblhIUldyYXBwZXIucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbihtZXRob2QsIHVybCkge1xuICAgIHRoaXMuX2Fib3J0KHRydWUpO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgeGhyID0gdGhpcy5feGhyO1xuICAgIHZhciBzdGF0ZSA9IDE7XG4gICAgdmFyIHRpbWVvdXQgPSAwO1xuICAgIHRoaXMuX2Fib3J0ID0gZnVuY3Rpb24oc2lsZW50KSB7XG4gICAgICAgIGlmICh0aGF0Ll9zZW5kVGltZW91dCAhPT0gMCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoYXQuX3NlbmRUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoYXQuX3NlbmRUaW1lb3V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUgPT09IDEgfHwgc3RhdGUgPT09IDIgfHwgc3RhdGUgPT09IDMpIHtcbiAgICAgICAgICAgIHN0YXRlID0gNDtcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBrO1xuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBrO1xuICAgICAgICAgICAgeGhyLm9uYWJvcnQgPSBrO1xuICAgICAgICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSBrO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGs7XG4gICAgICAgICAgICAvLyBJRSA4IC0gOTogWERvbWFpblJlcXVlc3QjYWJvcnQoKSBkb2VzIG5vdCBmaXJlIGFueSBldmVudFxuICAgICAgICAgICAgLy8gT3BlcmEgPCAxMDogWE1MSHR0cFJlcXVlc3QjYWJvcnQoKSBkb2VzIG5vdCBmaXJlIGFueSBldmVudFxuICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICBpZiAodGltZW91dCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgICAgICAgICAgdGhhdC5yZWFkeVN0YXRlID0gNDtcbiAgICAgICAgICAgICAgICB0aGF0Lm9ucmVhZHlzdGF0ZWNoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gMDtcbiAgICB9O1xuICAgIHZhciBvblN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzdGF0ZSA9PT0gMSkge1xuICAgICAgICAgICAgLy8gc3RhdGUgPSAyO1xuICAgICAgICAgICAgdmFyIHN0YXR1cyA9IDA7XG4gICAgICAgICAgICB2YXIgc3RhdHVzVGV4dCA9ICcnO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCEoJ2NvbnRlbnRUeXBlJyBpbiB4aHIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0geGhyLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0O1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgPCAxMCB0aHJvd3MgZXhjZXB0aW9uIGZvciBgeGhyLnN0YXR1c2Agd2hlbiB4aHIucmVhZHlTdGF0ZSA9PT0gMiB8fCB4aHIucmVhZHlTdGF0ZSA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSA8IDExIHRocm93cyBleGNlcHRpb24gZm9yIGB4aHIuc3RhdHVzYCB3aGVuIHhoci5yZWFkeVN0YXRlID09PSAyXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTEyMVxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggPCAxNCwgQ2hyb21lID8sIFNhZmFyaSA/XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5NjU4XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTc3ODU0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSAyMDA7XG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICdPSyc7XG4gICAgICAgICAgICAgICAgY29udGVudFR5cGUgPSB4aHIuY29udGVudFR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPSAyO1xuICAgICAgICAgICAgICAgIHRoYXQucmVhZHlTdGF0ZSA9IDI7XG4gICAgICAgICAgICAgICAgdGhhdC5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgICAgICAgICAgdGhhdC5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcbiAgICAgICAgICAgICAgICB0aGF0Ll9jb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlO1xuICAgICAgICAgICAgICAgIHRoYXQub25yZWFkeXN0YXRlY2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvblByb2dyZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG9uU3RhcnQoKTtcbiAgICAgICAgaWYgKHN0YXRlID09PSAyIHx8IHN0YXRlID09PSAzKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IDM7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VUZXh0ID0gJyc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gSUUgOCAtIDkgd2l0aCBYTUxIdHRwUmVxdWVzdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhhdC5yZWFkeVN0YXRlID0gMztcbiAgICAgICAgICAgIHRoYXQucmVzcG9uc2VUZXh0ID0gcmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgdGhhdC5vbnByb2dyZXNzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvbkZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBGaXJlZm94IDUyIGZpcmVzIFwicmVhZHlzdGF0ZWNoYW5nZVwiICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkgd2l0aG91dCBmaW5hbCBcInJlYWR5c3RhdGVjaGFuZ2VcIiAoeGhyLnJlYWR5U3RhdGUgPT09IDMpXG4gICAgICAgIC8vIElFIDggZmlyZXMgXCJvbmxvYWRcIiB3aXRob3V0IFwib25wcm9ncmVzc1wiXG4gICAgICAgIG9uUHJvZ3Jlc3MoKTtcbiAgICAgICAgaWYgKHN0YXRlID09PSAxIHx8IHN0YXRlID09PSAyIHx8IHN0YXRlID09PSAzKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IDQ7XG4gICAgICAgICAgICBpZiAodGltZW91dCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoYXQucmVhZHlTdGF0ZSA9IDQ7XG4gICAgICAgICAgICB0aGF0Lm9ucmVhZHlzdGF0ZWNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25SZWFkeVN0YXRlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh4aHIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBPcGVyYSAxMlxuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgb25GaW5pc2goKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICBvblByb2dyZXNzKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhoci5yZWFkeVN0YXRlID09PSAyKSB7XG4gICAgICAgICAgICAgICAgb25TdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25UaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgb25UaW1lb3V0KCk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMykge1xuICAgICAgICAgICAgb25Qcm9ncmVzcygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBYRG9tYWluUmVxdWVzdCNhYm9ydCByZW1vdmVzIG9ucHJvZ3Jlc3MsIG9uZXJyb3IsIG9ubG9hZFxuICAgIHhoci5vbmxvYWQgPSBvbkZpbmlzaDtcbiAgICB4aHIub25lcnJvciA9IG9uRmluaXNoO1xuICAgIC8vIGltcHJvcGVyIGZpeCB0byBtYXRjaCBGaXJlZm94IGJlaGF2aW9yLCBidXQgaXQgaXMgYmV0dGVyIHRoYW4ganVzdCBpZ25vcmUgYWJvcnRcbiAgICAvLyBzZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzY4NTk2XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODgwMjAwXG4gICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTE1MzU3MFxuICAgIC8vIElFIDggZmlyZXMgXCJvbmxvYWRcIiB3aXRob3V0IFwib25wcm9ncmVzc1xuICAgIHhoci5vbmFib3J0ID0gb25GaW5pc2g7XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzM2NzIzXG4gICAgaWYgKCEoJ3NlbmRBc0JpbmFyeScgaW4gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlKSAmJiAhKCdtb3pBbm9uJyBpbiBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUpKSB7XG4gICAgICAgIHhoci5vbnByb2dyZXNzID0gb25Qcm9ncmVzcztcbiAgICB9XG4gICAgLy8gSUUgOCAtIDkgKFhNTEhUVFBSZXF1ZXN0KVxuICAgIC8vIE9wZXJhIDwgMTJcbiAgICAvLyBGaXJlZm94IDwgMy41XG4gICAgLy8gRmlyZWZveCAzLjUgLSAzLjYgLSA/IDwgOS4wXG4gICAgLy8gb25wcm9ncmVzcyBpcyBub3QgZmlyZWQgc29tZXRpbWVzIG9yIGRlbGF5ZWRcbiAgICAvLyBzZWUgYWxzbyAjNjRcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gb25SZWFkeVN0YXRlQ2hhbmdlO1xuICAgIGlmICgnY29udGVudFR5cGUnIGluIHhocikge1xuICAgICAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArICdwYWRkaW5nPXRydWUnO1xuICAgIH1cbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgaWYgKCdyZWFkeVN0YXRlJyBpbiB4aHIpIHtcbiAgICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgT3BlcmEgMTIgaXNzdWUgd2l0aCBcInByb2dyZXNzXCIgZXZlbnRzXG4gICAgICAgIC8vICM5MVxuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG9uVGltZW91dCgpO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG59O1xuWEhSV3JhcHBlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9hYm9ydChmYWxzZSk7XG59O1xuWEhSV3JhcHBlci5wcm90b3R5cGUuZ2V0UmVzcG9uc2VIZWFkZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRUeXBlO1xufTtcblhIUldyYXBwZXIucHJvdG90eXBlLnNldFJlcXVlc3RIZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciB4aHIgPSB0aGlzLl94aHI7XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiB4aHIpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpO1xuICAgIH1cbn07XG5YSFJXcmFwcGVyLnByb3RvdHlwZS5nZXRBbGxSZXNwb25zZUhlYWRlcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5feGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycyAhPSB1bmRlZmluZWQgPyB0aGlzLl94aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgOiAnJztcbn07XG5YSFJXcmFwcGVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gbG9hZGluZyBpbmRpY2F0b3IgaW4gU2FmYXJpIDwgPyAoNiksIENocm9tZSA8IDE0LCBGaXJlZm94XG4gICAgaWYgKCEoJ29udGltZW91dCcgaW4gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlKSAmJiBkb2N1bWVudCAhPSB1bmRlZmluZWQgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPSB1bmRlZmluZWQgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2NvbXBsZXRlJykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHRoYXQuX3NlbmRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoYXQuX3NlbmRUaW1lb3V0ID0gMDtcbiAgICAgICAgICAgIHRoYXQuc2VuZCgpO1xuICAgICAgICB9LCA0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgeGhyID0gdGhpcy5feGhyO1xuICAgIC8vIHdpdGhDcmVkZW50aWFscyBzaG91bGQgYmUgc2V0IGFmdGVyIFwib3BlblwiIGZvciBTYWZhcmkgYW5kIENocm9tZSAoPCAxOSA/KVxuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcbiAgICB4aHIucmVzcG9uc2VUeXBlID0gdGhpcy5yZXNwb25zZVR5cGU7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8geGhyLnNlbmQoKTsgdGhyb3dzIFwiTm90IGVub3VnaCBhcmd1bWVudHNcIiBpbiBGaXJlZm94IDMuMFxuICAgICAgICB4aHIuc2VuZCh1bmRlZmluZWQpO1xuICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAvLyBTYWZhcmkgNS4xLjcsIE9wZXJhIDEyXG4gICAgICAgIHRocm93IGVycm9yMTtcbiAgICB9XG59O1xuZnVuY3Rpb24gdG9Mb3dlckNhc2UobmFtZSkge1xuICAgIHJldHVybiBuYW1lLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYy5jaGFyQ29kZUF0KDApICsgMzIpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gSGVhZGVyc1BvbHlmaWxsKGFsbCkge1xuICAgIC8vIEdldCBoZWFkZXJzOiBpbXBsZW1lbnRlZCBhY2NvcmRpbmcgdG8gbW96aWxsYSdzIGV4YW1wbGUgY29kZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0L2dldEFsbFJlc3BvbnNlSGVhZGVycyNFeGFtcGxlXG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGFycmF5ID0gYWxsLnNwbGl0KCdcXHJcXG4nKTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpe1xuICAgICAgICB2YXIgbGluZSA9IGFycmF5W2ldO1xuICAgICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6ICcpO1xuICAgICAgICB2YXIgbmFtZSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzogJyk7XG4gICAgICAgIG1hcFt0b0xvd2VyQ2FzZShuYW1lKV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5fbWFwID0gbWFwO1xufVxuSGVhZGVyc1BvbHlmaWxsLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcFt0b0xvd2VyQ2FzZShuYW1lKV07XG59O1xuZnVuY3Rpb24gWEhSVHJhbnNwb3J0KCkge1xufVxuWEhSVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24oeGhyLCBvblN0YXJ0Q2FsbGJhY2ssIG9uUHJvZ3Jlc3NDYWxsYmFjaywgb25GaW5pc2hDYWxsYmFjaywgdXJsLCB3aXRoQ3JlZGVudGlhbHMsIGhlYWRlcnMpIHtcbiAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVzcG9uc2VUZXh0ID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgdmFyIGNodW5rID0gcmVzcG9uc2VUZXh0LnNsaWNlKG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgIG9uUHJvZ3Jlc3NDYWxsYmFjayhjaHVuayk7XG4gICAgfTtcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXM7XG4gICAgICAgICAgICB2YXIgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0O1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgICAgIHZhciBoZWFkZXJzMSA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTtcbiAgICAgICAgICAgIG9uU3RhcnRDYWxsYmFjayhzdGF0dXMsIHN0YXR1c1RleHQsIGNvbnRlbnRUeXBlLCBuZXcgSGVhZGVyc1BvbHlmaWxsKGhlYWRlcnMxKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgb25GaW5pc2hDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgZm9yKHZhciBuYW1lIGluIGhlYWRlcnMpe1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhlYWRlcnMsIG5hbWUpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBoZWFkZXJzW25hbWVdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB4aHIuc2VuZCgpO1xufTtcbmZ1bmN0aW9uIEhlYWRlcnNXcmFwcGVyKGhlYWRlcnMyKSB7XG4gICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnMyO1xufVxuSGVhZGVyc1dyYXBwZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZGVycy5nZXQobmFtZSk7XG59O1xuZnVuY3Rpb24gRmV0Y2hUcmFuc3BvcnQoKSB7XG59XG5GZXRjaFRyYW5zcG9ydC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKHhociwgb25TdGFydENhbGxiYWNrLCBvblByb2dyZXNzQ2FsbGJhY2ssIG9uRmluaXNoQ2FsbGJhY2ssIHVybCwgd2l0aENyZWRlbnRpYWxzLCBoZWFkZXJzMikge1xuICAgIHZhciBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcjEoKTtcbiAgICB2YXIgc2lnbmFsID0gY29udHJvbGxlci5zaWduYWwgLy8gc2VlICMxMjBcbiAgICA7XG4gICAgdmFyIHRleHREZWNvZGVyID0gbmV3IFRleHREZWNvZGVyMSgpO1xuICAgIGZldGNoKHVybCwge1xuICAgICAgICBoZWFkZXJzOiBoZWFkZXJzMixcbiAgICAgICAgY3JlZGVudGlhbHM6IHdpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbicsXG4gICAgICAgIHNpZ25hbDogc2lnbmFsLFxuICAgICAgICBjYWNoZTogJ25vLXN0b3JlJ1xuICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgICAgIG9uU3RhcnRDYWxsYmFjayhyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQsIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSwgbmV3IEhlYWRlcnNXcmFwcGVyKHJlc3BvbnNlLmhlYWRlcnMpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciByZWFkTmV4dENodW5rID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IGJ5dGVzIGluIHRleHREZWNvZGVyIGFyZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2h1bmsgPSB0ZXh0RGVjb2Rlci5kZWNvZGUocmVzdWx0LnZhbHVlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUHJvZ3Jlc3NDYWxsYmFjayhjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkTmV4dENodW5rKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlYWROZXh0Q2h1bmsoKTtcbiAgICAgICAgfSk7XG4gICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgb25GaW5pc2hDYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIG9uRmluaXNoQ2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBFdmVudFRhcmdldDEoKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbmZ1bmN0aW9uIHRocm93RXJyb3IoZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgfSwgMCk7XG59XG5FdmVudFRhcmdldDEucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnRhcmdldCA9IHRoaXM7XG4gICAgdmFyIHR5cGVMaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZlbnQudHlwZV07XG4gICAgaWYgKHR5cGVMaXN0ZW5lcnMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSB0eXBlTGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKXtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IHR5cGVMaXN0ZW5lcnNbaV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIuaGFuZGxlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcbkV2ZW50VGFyZ2V0MS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdHlwZSA9IFN0cmluZyh0eXBlKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgIHZhciB0eXBlTGlzdGVuZXJzID0gbGlzdGVuZXJzW3R5cGVdO1xuICAgIGlmICh0eXBlTGlzdGVuZXJzID09IHVuZGVmaW5lZCkge1xuICAgICAgICB0eXBlTGlzdGVuZXJzID0gW107XG4gICAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IHR5cGVMaXN0ZW5lcnM7XG4gICAgfVxuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlTGlzdGVuZXJzLmxlbmd0aDsgaSArPSAxKXtcbiAgICAgICAgaWYgKHR5cGVMaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3VuZCkge1xuICAgICAgICB0eXBlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cbn07XG5FdmVudFRhcmdldDEucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIHR5cGUgPSBTdHJpbmcodHlwZSk7XG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICB2YXIgdHlwZUxpc3RlbmVycyA9IGxpc3RlbmVyc1t0eXBlXTtcbiAgICBpZiAodHlwZUxpc3RlbmVycyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIGZpbHRlcmVkID0gW107XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlTGlzdGVuZXJzLmxlbmd0aDsgaSArPSAxKXtcbiAgICAgICAgICAgIGlmICh0eXBlTGlzdGVuZXJzW2ldICE9PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkLnB1c2godHlwZUxpc3RlbmVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGZpbHRlcmVkO1xuICAgICAgICB9XG4gICAgfVxufTtcbmZ1bmN0aW9uIEV2ZW50MSh0eXBlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnRhcmdldCA9IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIE1lc3NhZ2VFdmVudDEodHlwZSwgb3B0aW9ucykge1xuICAgIEV2ZW50MS5jYWxsKHRoaXMsIHR5cGUpO1xuICAgIHRoaXMuZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICB0aGlzLmxhc3RFdmVudElkID0gb3B0aW9ucy5sYXN0RXZlbnRJZDtcbn1cbk1lc3NhZ2VFdmVudDEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudDEucHJvdG90eXBlKTtcbmZ1bmN0aW9uIENvbm5lY3Rpb25FdmVudCh0eXBlLCBvcHRpb25zKSB7XG4gICAgRXZlbnQxLmNhbGwodGhpcywgdHlwZSk7XG4gICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBvcHRpb25zLnN0YXR1c1RleHQ7XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xufVxuQ29ubmVjdGlvbkV2ZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnQxLnByb3RvdHlwZSk7XG52YXIgV0FJVElORyA9IC0xO1xudmFyIENPTk5FQ1RJTkcgPSAwO1xudmFyIE9QRU4gPSAxO1xudmFyIENMT1NFRCA9IDI7XG52YXIgQUZURVJfQ1IgPSAtMTtcbnZhciBGSUVMRF9TVEFSVCA9IDA7XG52YXIgRklFTEQgPSAxO1xudmFyIFZBTFVFX1NUQVJUID0gMjtcbnZhciBWQUxVRSA9IDM7XG52YXIgY29udGVudFR5cGVSZWdFeHAgPSAvXnRleHRcXC9ldmVudFxcLXN0cmVhbTs/KFxccypjaGFyc2V0XFw9dXRmXFwtOCk/JC9pO1xudmFyIE1JTklNVU1fRFVSQVRJT04gPSAxMDAwO1xudmFyIE1BWElNVU1fRFVSQVRJT04gPSAxODAwMDAwMDtcbnZhciBwYXJzZUR1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUsIGRlZikge1xuICAgIHZhciBuID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICBpZiAobiAhPT0gbikge1xuICAgICAgICBuID0gZGVmO1xuICAgIH1cbiAgICByZXR1cm4gY2xhbXBEdXJhdGlvbihuKTtcbn07XG52YXIgY2xhbXBEdXJhdGlvbiA9IGZ1bmN0aW9uKG4pIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgTUlOSU1VTV9EVVJBVElPTiksIE1BWElNVU1fRFVSQVRJT04pO1xufTtcbnZhciBmaXJlID0gZnVuY3Rpb24odGhhdCwgZiwgZXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGYuY2FsbCh0aGF0LCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93RXJyb3IoZSk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIEV2ZW50U291cmNlUG9seWZpbGwodXJsLCBvcHRpb25zKSB7XG4gICAgRXZlbnRUYXJnZXQxLmNhbGwodGhpcyk7XG4gICAgdGhpcy5vbm9wZW4gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbm1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmVycm9yID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudXJsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpdGhDcmVkZW50aWFscyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9jbG9zZSA9IHVuZGVmaW5lZDtcbiAgICBzdGFydCh0aGlzLCB1cmwsIG9wdGlvbnMpO1xufVxudmFyIGlzRmV0Y2hTdXBwb3J0ZWQgPSBmZXRjaCAhPSB1bmRlZmluZWQgJiYgUmVzcG9uc2UxICE9IHVuZGVmaW5lZCAmJiAnYm9keScgaW4gUmVzcG9uc2UxLnByb3RvdHlwZTtcbmZ1bmN0aW9uIHN0YXJ0KGVzLCB1cmwsIG9wdGlvbnMpIHtcbiAgICB1cmwgPSBTdHJpbmcodXJsKTtcbiAgICB2YXIgd2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucyAhPSB1bmRlZmluZWQgJiYgQm9vbGVhbihvcHRpb25zLndpdGhDcmVkZW50aWFscyk7XG4gICAgdmFyIGluaXRpYWxSZXRyeSA9IGNsYW1wRHVyYXRpb24oMTAwMCk7XG4gICAgdmFyIGhlYXJ0YmVhdFRpbWVvdXQgPSBvcHRpb25zICE9IHVuZGVmaW5lZCAmJiBvcHRpb25zLmhlYXJ0YmVhdFRpbWVvdXQgIT0gdW5kZWZpbmVkID8gcGFyc2VEdXJhdGlvbihvcHRpb25zLmhlYXJ0YmVhdFRpbWVvdXQsIDQ1MDAwKSA6IGNsYW1wRHVyYXRpb24oNDUwMDApO1xuICAgIHZhciBsYXN0RXZlbnRJZCA9ICcnO1xuICAgIHZhciByZXRyeSA9IGluaXRpYWxSZXRyeTtcbiAgICB2YXIgd2FzQWN0aXZpdHkgPSBmYWxzZTtcbiAgICB2YXIgaGVhZGVyczIgPSBvcHRpb25zICE9IHVuZGVmaW5lZCAmJiBvcHRpb25zLmhlYWRlcnMgIT0gdW5kZWZpbmVkID8gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvcHRpb25zLmhlYWRlcnMpKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgQ3VycmVudFRyYW5zcG9ydCA9IG9wdGlvbnMgIT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuVHJhbnNwb3J0ICE9IHVuZGVmaW5lZCA/IG9wdGlvbnMuVHJhbnNwb3J0IDogWE1MSHR0cFJlcXVlc3Q7XG4gICAgdmFyIHhociA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgIShvcHRpb25zICE9IHVuZGVmaW5lZCAmJiBvcHRpb25zLlRyYW5zcG9ydCAhPSB1bmRlZmluZWQpID8gdW5kZWZpbmVkIDogbmV3IFhIUldyYXBwZXIobmV3IEN1cnJlbnRUcmFuc3BvcnQoKSk7XG4gICAgdmFyIHRyYW5zcG9ydCA9IHhociA9PSB1bmRlZmluZWQgPyBuZXcgRmV0Y2hUcmFuc3BvcnQoKSA6IG5ldyBYSFJUcmFuc3BvcnQoKTtcbiAgICB2YXIgY2FuY2VsRnVuY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHRpbWVvdXQgPSAwO1xuICAgIHZhciBjdXJyZW50U3RhdGUgPSBXQUlUSU5HO1xuICAgIHZhciBkYXRhQnVmZmVyID0gJyc7XG4gICAgdmFyIGxhc3RFdmVudElkQnVmZmVyID0gJyc7XG4gICAgdmFyIGV2ZW50VHlwZUJ1ZmZlciA9ICcnO1xuICAgIHZhciB0ZXh0QnVmZmVyID0gJyc7XG4gICAgdmFyIHN0YXRlID0gRklFTERfU1RBUlQ7XG4gICAgdmFyIGZpZWxkU3RhcnQgPSAwO1xuICAgIHZhciB2YWx1ZVN0YXJ0ID0gMDtcbiAgICB2YXIgb25TdGFydCA9IGZ1bmN0aW9uKHN0YXR1cywgc3RhdHVzVGV4dCwgY29udGVudFR5cGUsIGhlYWRlcnMzLCBjYW5jZWwpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSA9PT0gQ09OTkVDVElORykge1xuICAgICAgICAgICAgY2FuY2VsRnVuY3Rpb24gPSBjYW5jZWw7XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAyMDAgJiYgY29udGVudFR5cGUgIT0gdW5kZWZpbmVkICYmIGNvbnRlbnRUeXBlUmVnRXhwLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gT1BFTjtcbiAgICAgICAgICAgICAgICB3YXNBY3Rpdml0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0cnkgPSBpbml0aWFsUmV0cnk7XG4gICAgICAgICAgICAgICAgZXMucmVhZHlTdGF0ZSA9IE9QRU47XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IENvbm5lY3Rpb25FdmVudCgnb3BlbicsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgZmlyZShlcywgZXMub25vcGVuLCBldmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXNUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gc3RhdHVzVGV4dC5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiRXZlbnRTb3VyY2UncyByZXNwb25zZSBoYXMgYSBzdGF0dXMgXCIgKyBzdGF0dXMgKyAnICcgKyBzdGF0dXNUZXh0ICsgJyB0aGF0IGlzIG5vdCAyMDAuIEFib3J0aW5nIHRoZSBjb25uZWN0aW9uLic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiRXZlbnRTb3VyY2UncyByZXNwb25zZSBoYXMgYSBDb250ZW50LVR5cGUgc3BlY2lmeWluZyBhbiB1bnN1cHBvcnRlZCB0eXBlOiBcIiArIChjb250ZW50VHlwZSA9PSB1bmRlZmluZWQgPyAnLScgOiBjb250ZW50VHlwZS5yZXBsYWNlKC9cXHMrL2csICcgJykpICsgJy4gQWJvcnRpbmcgdGhlIGNvbm5lY3Rpb24uJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcihuZXcgRXJyb3IobWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IENvbm5lY3Rpb25FdmVudCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzM1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGZpcmUoZXMsIGVzLm9uZXJyb3IsIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIG9uUHJvZ3Jlc3MgPSBmdW5jdGlvbih0ZXh0Q2h1bmspIHtcbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSA9PT0gT1BFTikge1xuICAgICAgICAgICAgdmFyIG4gPSAtMTtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0ZXh0Q2h1bmsubGVuZ3RoOyBpICs9IDEpe1xuICAgICAgICAgICAgICAgIHZhciBjID0gdGV4dENodW5rLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKGMgPT09ICdcXG4nLmNoYXJDb2RlQXQoMCkgfHwgYyA9PT0gJ1xccicuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICBuID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2h1bmsgPSAobiAhPT0gLTEgPyB0ZXh0QnVmZmVyIDogJycpICsgdGV4dENodW5rLnNsaWNlKDAsIG4gKyAxKTtcbiAgICAgICAgICAgIHRleHRCdWZmZXIgPSAobiA9PT0gLTEgPyB0ZXh0QnVmZmVyIDogJycpICsgdGV4dENodW5rLnNsaWNlKG4gKyAxKTtcbiAgICAgICAgICAgIGlmIChjaHVuayAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICB3YXNBY3Rpdml0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IodmFyIHBvc2l0aW9uID0gMDsgcG9zaXRpb24gPCBjaHVuay5sZW5ndGg7IHBvc2l0aW9uICs9IDEpe1xuICAgICAgICAgICAgICAgIHZhciBjID0gY2h1bmsuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBBRlRFUl9DUiAmJiBjID09PSAnXFxuJy5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gRklFTERfU1RBUlQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBBRlRFUl9DUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBGSUVMRF9TVEFSVDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gJ1xccicuY2hhckNvZGVBdCgwKSB8fCBjID09PSAnXFxuJy5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT09IEZJRUxEX1NUQVJUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBGSUVMRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVN0YXJ0ID0gcG9zaXRpb24gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSBjaHVuay5zbGljZShmaWVsZFN0YXJ0LCB2YWx1ZVN0YXJ0IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY2h1bmsuc2xpY2UodmFsdWVTdGFydCArICh2YWx1ZVN0YXJ0IDwgcG9zaXRpb24gJiYgY2h1bmsuY2hhckNvZGVBdCh2YWx1ZVN0YXJ0KSA9PT0gJyAnLmNoYXJDb2RlQXQoMCkgPyAxIDogMCksIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQnVmZmVyICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQnVmZmVyICs9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmllbGQgPT09ICdpZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEV2ZW50SWRCdWZmZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpZWxkID09PSAnZXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZUJ1ZmZlciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmllbGQgPT09ICdyZXRyeScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFJldHJ5ID0gcGFyc2VEdXJhdGlvbih2YWx1ZSwgaW5pdGlhbFJldHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnkgPSBpbml0aWFsUmV0cnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWVsZCA9PT0gJ2hlYXJ0YmVhdFRpbWVvdXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYXJ0YmVhdFRpbWVvdXQgPSBwYXJzZUR1cmF0aW9uKHZhbHVlLCBoZWFydGJlYXRUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaGVhcnRiZWF0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09IEZJRUxEX1NUQVJUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFCdWZmZXIgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFdmVudElkID0gbGFzdEV2ZW50SWRCdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFR5cGVCdWZmZXIgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFR5cGVCdWZmZXIgPSAnbWVzc2FnZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IE1lc3NhZ2VFdmVudDEoZXZlbnRUeXBlQnVmZmVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhQnVmZmVyLnNsaWNlKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEV2ZW50SWQ6IGxhc3RFdmVudElkQnVmZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50VHlwZUJ1ZmZlciA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlKGVzLCBlcy5vbm1lc3NhZ2UsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFN0YXRlID09PSBDTE9TRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQnVmZmVyID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlQnVmZmVyID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IGMgPT09ICdcXHInLmNoYXJDb2RlQXQoMCkgPyBBRlRFUl9DUiA6IEZJRUxEX1NUQVJUO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBGSUVMRF9TVEFSVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkU3RhcnQgPSBwb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IEZJRUxEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSBGSUVMRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID09PSAnOicuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVN0YXJ0ID0gcG9zaXRpb24gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IFZBTFVFX1NUQVJUO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFZBTFVFX1NUQVJUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBWQUxVRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIG9uRmluaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT09IE9QRU4gfHwgY3VycmVudFN0YXRlID09PSBDT05ORUNUSU5HKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBXQUlUSU5HO1xuICAgICAgICAgICAgaWYgKHRpbWVvdXQgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvblRpbWVvdXQoKTtcbiAgICAgICAgICAgIH0sIHJldHJ5KTtcbiAgICAgICAgICAgIHJldHJ5ID0gY2xhbXBEdXJhdGlvbihNYXRoLm1pbihpbml0aWFsUmV0cnkgKiAxNiwgcmV0cnkgKiAyKSk7XG4gICAgICAgICAgICBlcy5yZWFkeVN0YXRlID0gQ09OTkVDVElORztcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudDEoJ2Vycm9yJyk7XG4gICAgICAgICAgICBlcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIGZpcmUoZXMsIGVzLm9uZXJyb3IsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGN1cnJlbnRTdGF0ZSA9IENMT1NFRDtcbiAgICAgICAgaWYgKGNhbmNlbEZ1bmN0aW9uICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FuY2VsRnVuY3Rpb24oKTtcbiAgICAgICAgICAgIGNhbmNlbEZ1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lb3V0ICE9PSAwKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlcy5yZWFkeVN0YXRlID0gQ0xPU0VEO1xuICAgIH07XG4gICAgdmFyIG9uVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSAhPT0gV0FJVElORykge1xuICAgICAgICAgICAgaWYgKCF3YXNBY3Rpdml0eSAmJiBjYW5jZWxGdW5jdGlvbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKG5ldyBFcnJvcignTm8gYWN0aXZpdHkgd2l0aGluICcgKyBoZWFydGJlYXRUaW1lb3V0ICsgJyBtaWxsaXNlY29uZHMuIFJlY29ubmVjdGluZy4nKSk7XG4gICAgICAgICAgICAgICAgY2FuY2VsRnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBjYW5jZWxGdW5jdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2FzQWN0aXZpdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgb25UaW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgfSwgaGVhcnRiZWF0VGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2FzQWN0aXZpdHkgPSBmYWxzZTtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvblRpbWVvdXQoKTtcbiAgICAgICAgfSwgaGVhcnRiZWF0VGltZW91dCk7XG4gICAgICAgIGN1cnJlbnRTdGF0ZSA9IENPTk5FQ1RJTkc7XG4gICAgICAgIGRhdGFCdWZmZXIgPSAnJztcbiAgICAgICAgZXZlbnRUeXBlQnVmZmVyID0gJyc7XG4gICAgICAgIGxhc3RFdmVudElkQnVmZmVyID0gbGFzdEV2ZW50SWQ7XG4gICAgICAgIHRleHRCdWZmZXIgPSAnJztcbiAgICAgICAgZmllbGRTdGFydCA9IDA7XG4gICAgICAgIHZhbHVlU3RhcnQgPSAwO1xuICAgICAgICBzdGF0ZSA9IEZJRUxEX1NUQVJUO1xuICAgICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00Mjg5MTZcbiAgICAgICAgLy8gUmVxdWVzdCBoZWFkZXIgZmllbGQgTGFzdC1FdmVudC1JRCBpcyBub3QgYWxsb3dlZCBieSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzLlxuICAgICAgICB2YXIgcmVxdWVzdFVSTCA9IHVybDtcbiAgICAgICAgaWYgKHVybC5zbGljZSgwLCA1KSAhPT0gJ2RhdGE6JyAmJiB1cmwuc2xpY2UoMCwgNSkgIT09ICdibG9iOicpIHtcbiAgICAgICAgICAgIGlmIChsYXN0RXZlbnRJZCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0VVJMICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyAnbGFzdEV2ZW50SWQ9JyArIGVuY29kZVVSSUNvbXBvbmVudChsYXN0RXZlbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlcXVlc3RIZWFkZXJzID0ge1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1snQWNjZXB0J10gPSAndGV4dC9ldmVudC1zdHJlYW0nO1xuICAgICAgICBpZiAoaGVhZGVyczIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3IodmFyIG5hbWUgaW4gaGVhZGVyczIpe1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaGVhZGVyczIsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzW25hbWVdID0gaGVhZGVyczJbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQub3Blbih4aHIsIG9uU3RhcnQsIG9uUHJvZ3Jlc3MsIG9uRmluaXNoLCByZXF1ZXN0VVJMLCB3aXRoQ3JlZGVudGlhbHMsIHJlcXVlc3RIZWFkZXJzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZXMudXJsID0gdXJsO1xuICAgIGVzLnJlYWR5U3RhdGUgPSBDT05ORUNUSU5HO1xuICAgIGVzLndpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscztcbiAgICBlcy5fY2xvc2UgPSBjbG9zZTtcbiAgICBvblRpbWVvdXQoKTtcbn1cbkV2ZW50U291cmNlUG9seWZpbGwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudFRhcmdldDEucHJvdG90eXBlKTtcbkV2ZW50U291cmNlUG9seWZpbGwucHJvdG90eXBlLkNPTk5FQ1RJTkcgPSBDT05ORUNUSU5HO1xuRXZlbnRTb3VyY2VQb2x5ZmlsbC5wcm90b3R5cGUuT1BFTiA9IE9QRU47XG5FdmVudFNvdXJjZVBvbHlmaWxsLnByb3RvdHlwZS5DTE9TRUQgPSBDTE9TRUQ7XG5FdmVudFNvdXJjZVBvbHlmaWxsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2Nsb3NlKCk7XG59O1xuRXZlbnRTb3VyY2VQb2x5ZmlsbC5DT05ORUNUSU5HID0gQ09OTkVDVElORztcbkV2ZW50U291cmNlUG9seWZpbGwuT1BFTiA9IE9QRU47XG5FdmVudFNvdXJjZVBvbHlmaWxsLkNMT1NFRCA9IENMT1NFRDtcbkV2ZW50U291cmNlUG9seWZpbGwucHJvdG90eXBlLndpdGhDcmVkZW50aWFscyA9IHVuZGVmaW5lZDtcbnZhciBfZGVmYXVsdCA9IEV2ZW50U291cmNlUG9seWZpbGw7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnQtc291cmNlLXBvbHlmaWxsLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJkb2N1bWVudCIsIndpbmRvdyIsIlJlc3BvbnNlMSIsIlJlc3BvbnNlIiwiVGV4dERlY29kZXIxIiwiVGV4dERlY29kZXIiLCJUZXh0RW5jb2RlcjEiLCJUZXh0RW5jb2RlciIsIkFib3J0Q29udHJvbGxlcjEiLCJBYm9ydENvbnRyb2xsZXIiLCJ1bmRlZmluZWQiLCJzaWduYWwiLCJhYm9ydCIsIlRleHREZWNvZGVyUG9seWZpbGwiLCJiaXRzTmVlZGVkIiwiY29kZVBvaW50IiwicHJvdG90eXBlIiwiZGVjb2RlIiwib2N0ZXRzIiwidmFsaWQiLCJzaGlmdCIsIm9jdGV0c0NvdW50IiwiRXJyb3IiLCJSRVBMQUNFUiIsInN0cmluZyIsImkiLCJsZW5ndGgiLCJvY3RldCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInN1cHBvcnRzU3RyZWFtT3B0aW9uIiwiZW5jb2RlIiwic3RyZWFtIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiayIsIlhIUldyYXBwZXIiLCJ4aHIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInJlc3BvbnNlVGV4dCIsIm9ucHJvZ3Jlc3MiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJfY29udGVudFR5cGUiLCJfeGhyIiwiX3NlbmRUaW1lb3V0IiwiX2Fib3J0Iiwib3BlbiIsIm1ldGhvZCIsInVybCIsInRoYXQiLCJzdGF0ZSIsInRpbWVvdXQiLCJzaWxlbnQiLCJjbGVhclRpbWVvdXQiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9uU3RhcnQiLCJjb250ZW50VHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwib25Qcm9ncmVzcyIsIm9uRmluaXNoIiwib25SZWFkeVN0YXRlQ2hhbmdlIiwib25UaW1lb3V0Iiwic2V0VGltZW91dCIsIlhNTEh0dHBSZXF1ZXN0IiwiaW5kZXhPZiIsIm5hbWUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2VuZCIsImVycm9yMSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsImMiLCJjaGFyQ29kZUF0IiwiSGVhZGVyc1BvbHlmaWxsIiwiYWxsIiwibWFwIiwiY3JlYXRlIiwiYXJyYXkiLCJzcGxpdCIsImxpbmUiLCJwYXJ0cyIsImpvaW4iLCJfbWFwIiwiZ2V0IiwiWEhSVHJhbnNwb3J0Iiwib25TdGFydENhbGxiYWNrIiwib25Qcm9ncmVzc0NhbGxiYWNrIiwib25GaW5pc2hDYWxsYmFjayIsImhlYWRlcnMiLCJvZmZzZXQiLCJjaHVuayIsInNsaWNlIiwiaGVhZGVyczEiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJIZWFkZXJzV3JhcHBlciIsImhlYWRlcnMyIiwiX2hlYWRlcnMiLCJGZXRjaFRyYW5zcG9ydCIsImNvbnRyb2xsZXIiLCJ0ZXh0RGVjb2RlciIsImZldGNoIiwiY3JlZGVudGlhbHMiLCJjYWNoZSIsInRoZW4iLCJyZXNwb25zZSIsInJlYWRlciIsImJvZHkiLCJnZXRSZWFkZXIiLCJjYW5jZWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlYWROZXh0Q2h1bmsiLCJyZWFkIiwicmVzdWx0IiwiZG9uZSIsIkV2ZW50VGFyZ2V0MSIsIl9saXN0ZW5lcnMiLCJ0aHJvd0Vycm9yIiwiZSIsImRpc3BhdGNoRXZlbnQiLCJldmVudCIsInRhcmdldCIsInR5cGVMaXN0ZW5lcnMiLCJ0eXBlIiwibGlzdGVuZXIiLCJoYW5kbGVFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJmb3VuZCIsInB1c2giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmlsdGVyZWQiLCJFdmVudDEiLCJNZXNzYWdlRXZlbnQxIiwib3B0aW9ucyIsImRhdGEiLCJsYXN0RXZlbnRJZCIsIkNvbm5lY3Rpb25FdmVudCIsIldBSVRJTkciLCJDT05ORUNUSU5HIiwiT1BFTiIsIkNMT1NFRCIsIkFGVEVSX0NSIiwiRklFTERfU1RBUlQiLCJGSUVMRCIsIlZBTFVFX1NUQVJUIiwiVkFMVUUiLCJjb250ZW50VHlwZVJlZ0V4cCIsIk1JTklNVU1fRFVSQVRJT04iLCJNQVhJTVVNX0RVUkFUSU9OIiwicGFyc2VEdXJhdGlvbiIsImRlZiIsIm4iLCJwYXJzZUludCIsImNsYW1wRHVyYXRpb24iLCJNYXRoIiwibWluIiwibWF4IiwiZmlyZSIsImYiLCJFdmVudFNvdXJjZVBvbHlmaWxsIiwib25vcGVuIiwib25tZXNzYWdlIiwiX2Nsb3NlIiwic3RhcnQiLCJpc0ZldGNoU3VwcG9ydGVkIiwiZXMiLCJCb29sZWFuIiwiaW5pdGlhbFJldHJ5IiwiaGVhcnRiZWF0VGltZW91dCIsInJldHJ5Iiwid2FzQWN0aXZpdHkiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJDdXJyZW50VHJhbnNwb3J0IiwiVHJhbnNwb3J0IiwidHJhbnNwb3J0IiwiY2FuY2VsRnVuY3Rpb24iLCJjdXJyZW50U3RhdGUiLCJkYXRhQnVmZmVyIiwibGFzdEV2ZW50SWRCdWZmZXIiLCJldmVudFR5cGVCdWZmZXIiLCJ0ZXh0QnVmZmVyIiwiZmllbGRTdGFydCIsInZhbHVlU3RhcnQiLCJoZWFkZXJzMyIsInRlc3QiLCJtZXNzYWdlIiwiY2xvc2UiLCJ0ZXh0Q2h1bmsiLCJwb3NpdGlvbiIsImZpZWxkIiwicmVxdWVzdFVSTCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcXVlc3RIZWFkZXJzIiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/event-source-polyfill.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/fouc.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/client/dev/fouc.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.displayContent = displayContent;\n\nfunction displayContent(callback) {\n  (window.requestAnimationFrame || setTimeout)(function () {\n    for (var x = document.querySelectorAll('[data-next-hide-fouc]'), i = x.length; i--;) {\n      x[i].parentNode.removeChild(x[i]);\n    }\n\n    if (callback) {\n      callback();\n    }\n  });\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvZm91Yy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELHNCQUFBLEdBQXlCRSxjQUF6Qjs7QUFDQSxTQUFTQSxjQUFULENBQXdCQyxRQUF4QixFQUFrQztBQUM5QixHQUFDQyxNQUFNLENBQUNDLHFCQUFQLElBQWdDQyxVQUFqQyxFQUE2QyxZQUFXO0FBQ3BELFNBQUksSUFBSUMsQ0FBQyxHQUFHQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLHVCQUExQixDQUFSLEVBQTREQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0ksTUFBdEUsRUFBOEVELENBQUMsRUFBL0UsR0FBbUY7QUFDL0VILE1BQUFBLENBQUMsQ0FBQ0csQ0FBRCxDQUFELENBQUtFLFVBQUwsQ0FBZ0JDLFdBQWhCLENBQTRCTixDQUFDLENBQUNHLENBQUQsQ0FBN0I7QUFDSDs7QUFDRCxRQUFJUCxRQUFKLEVBQWM7QUFDVkEsTUFBQUEsUUFBUTtBQUNYO0FBQ0osR0FQRDtBQVFIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2Rldi9mb3VjLmpzPzNmMGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRpc3BsYXlDb250ZW50ID0gZGlzcGxheUNvbnRlbnQ7XG5mdW5jdGlvbiBkaXNwbGF5Q29udGVudChjYWxsYmFjaykge1xuICAgICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHNldFRpbWVvdXQpKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IodmFyIHggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1uZXh0LWhpZGUtZm91Y10nKSwgaSA9IHgubGVuZ3RoOyBpLS07KXtcbiAgICAgICAgICAgIHhbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh4W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91Yy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkaXNwbGF5Q29udGVudCIsImNhbGxiYWNrIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsIngiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/fouc.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/dev/on-demand-entries-utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/client/dev/on-demand-entries-utils.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.closePing = closePing;\nexports.setupPing = setupPing;\nexports.currentPage = void 0;\n\nvar _eventsource = __webpack_require__(/*! ./error-overlay/eventsource */ \"./node_modules/next/dist/client/dev/error-overlay/eventsource.js\");\n\nlet evtSource;\nlet currentPage;\nexports.currentPage = currentPage;\n\nfunction closePing() {\n  if (evtSource) evtSource.close();\n  evtSource = null;\n}\n\nfunction setupPing(assetPrefix, pathnameFn, retry) {\n  const pathname = pathnameFn(); // Make sure to only create new EventSource request if page has changed\n\n  if (pathname === currentPage && !retry) return;\n  exports.currentPage = currentPage = pathname; // close current EventSource connection\n\n  closePing();\n  evtSource = (0, _eventsource).getEventSourceWrapper({\n    path: `${assetPrefix}/_next/webpack-hmr?page=${encodeURIComponent(currentPage)}`,\n    timeout: 5000\n  });\n  evtSource.addMessageListener(event => {\n    if (event.data.indexOf('{') === -1) return;\n\n    try {\n      const payload = JSON.parse(event.data); // don't attempt fetching the page if we're already showing\n      // the dev overlay as this can cause the error to be triggered\n      // repeatedly\n\n      if (payload.invalid && !self.__NEXT_DATA__.err) {\n        // Payload can be invalid even if the page does not exist.\n        // So, we need to make sure it exists before reloading.\n        fetch(location.href, {\n          credentials: 'same-origin'\n        }).then(pageRes => {\n          if (pageRes.status === 200) {\n            location.reload();\n          }\n        });\n      }\n    } catch (err) {\n      console.error('on-demand-entries failed to parse response', err);\n    }\n  });\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvb24tZGVtYW5kLWVudHJpZXMtdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhOztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCxpQkFBQSxHQUFvQkUsU0FBcEI7QUFDQUYsaUJBQUEsR0FBb0JHLFNBQXBCO0FBQ0FILG1CQUFBLEdBQXNCLEtBQUssQ0FBM0I7O0FBQ0EsSUFBSUssWUFBWSxHQUFHQyxtQkFBTyxDQUFDLHFHQUFELENBQTFCOztBQUNBLElBQUlDLFNBQUo7QUFDQSxJQUFJSCxXQUFKO0FBQ0FKLG1CQUFBLEdBQXNCSSxXQUF0Qjs7QUFDQSxTQUFTRixTQUFULEdBQXFCO0FBQ2pCLE1BQUlLLFNBQUosRUFBZUEsU0FBUyxDQUFDQyxLQUFWO0FBQ2ZELEVBQUFBLFNBQVMsR0FBRyxJQUFaO0FBQ0g7O0FBQ0QsU0FBU0osU0FBVCxDQUFtQk0sV0FBbkIsRUFBZ0NDLFVBQWhDLEVBQTRDQyxLQUE1QyxFQUFtRDtBQUMvQyxRQUFNQyxRQUFRLEdBQUdGLFVBQVUsRUFBM0IsQ0FEK0MsQ0FFL0M7O0FBQ0EsTUFBSUUsUUFBUSxLQUFLUixXQUFiLElBQTRCLENBQUNPLEtBQWpDLEVBQXdDO0FBQ3hDWCxFQUFBQSxtQkFBQSxHQUFzQkksV0FBVyxHQUFHUSxRQUFwQyxDQUorQyxDQUsvQzs7QUFDQVYsRUFBQUEsU0FBUztBQUNUSyxFQUFBQSxTQUFTLEdBQUcsQ0FBQyxHQUFHRixZQUFKLEVBQWtCUSxxQkFBbEIsQ0FBd0M7QUFDaERDLElBQUFBLElBQUksRUFBRyxHQUFFTCxXQUFZLDJCQUEwQk0sa0JBQWtCLENBQUNYLFdBQUQsQ0FBYyxFQUQvQjtBQUVoRFksSUFBQUEsT0FBTyxFQUFFO0FBRnVDLEdBQXhDLENBQVo7QUFJQVQsRUFBQUEsU0FBUyxDQUFDVSxrQkFBVixDQUE4QkMsS0FBRCxJQUFTO0FBQ2xDLFFBQUlBLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxPQUFYLENBQW1CLEdBQW5CLE1BQTRCLENBQUMsQ0FBakMsRUFBb0M7O0FBQ3BDLFFBQUk7QUFDQSxZQUFNQyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXTCxLQUFLLENBQUNDLElBQWpCLENBQWhCLENBREEsQ0FFQTtBQUNBO0FBQ0E7O0FBQ0EsVUFBSUUsT0FBTyxDQUFDRyxPQUFSLElBQW1CLENBQUNDLElBQUksQ0FBQ0MsYUFBTCxDQUFtQkMsR0FBM0MsRUFBZ0Q7QUFDNUM7QUFDQTtBQUNBQyxRQUFBQSxLQUFLLENBQUNDLFFBQVEsQ0FBQ0MsSUFBVixFQUFnQjtBQUNqQkMsVUFBQUEsV0FBVyxFQUFFO0FBREksU0FBaEIsQ0FBTCxDQUVHQyxJQUZILENBRVNDLE9BQUQsSUFBVztBQUNmLGNBQUlBLE9BQU8sQ0FBQ0MsTUFBUixLQUFtQixHQUF2QixFQUE0QjtBQUN4QkwsWUFBQUEsUUFBUSxDQUFDTSxNQUFUO0FBQ0g7QUFDSixTQU5EO0FBT0g7QUFDSixLQWhCRCxDQWdCRSxPQUFPUixHQUFQLEVBQVk7QUFDVlMsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsNENBQWQsRUFBNERWLEdBQTVEO0FBQ0g7QUFDSixHQXJCRDtBQXNCSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9kZXYvb24tZGVtYW5kLWVudHJpZXMtdXRpbHMuanM/NjU0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xvc2VQaW5nID0gY2xvc2VQaW5nO1xuZXhwb3J0cy5zZXR1cFBpbmcgPSBzZXR1cFBpbmc7XG5leHBvcnRzLmN1cnJlbnRQYWdlID0gdm9pZCAwO1xudmFyIF9ldmVudHNvdXJjZSA9IHJlcXVpcmUoXCIuL2Vycm9yLW92ZXJsYXkvZXZlbnRzb3VyY2VcIik7XG5sZXQgZXZ0U291cmNlO1xubGV0IGN1cnJlbnRQYWdlO1xuZXhwb3J0cy5jdXJyZW50UGFnZSA9IGN1cnJlbnRQYWdlO1xuZnVuY3Rpb24gY2xvc2VQaW5nKCkge1xuICAgIGlmIChldnRTb3VyY2UpIGV2dFNvdXJjZS5jbG9zZSgpO1xuICAgIGV2dFNvdXJjZSA9IG51bGw7XG59XG5mdW5jdGlvbiBzZXR1cFBpbmcoYXNzZXRQcmVmaXgsIHBhdGhuYW1lRm4sIHJldHJ5KSB7XG4gICAgY29uc3QgcGF0aG5hbWUgPSBwYXRobmFtZUZuKCk7XG4gICAgLy8gTWFrZSBzdXJlIHRvIG9ubHkgY3JlYXRlIG5ldyBFdmVudFNvdXJjZSByZXF1ZXN0IGlmIHBhZ2UgaGFzIGNoYW5nZWRcbiAgICBpZiAocGF0aG5hbWUgPT09IGN1cnJlbnRQYWdlICYmICFyZXRyeSkgcmV0dXJuO1xuICAgIGV4cG9ydHMuY3VycmVudFBhZ2UgPSBjdXJyZW50UGFnZSA9IHBhdGhuYW1lO1xuICAgIC8vIGNsb3NlIGN1cnJlbnQgRXZlbnRTb3VyY2UgY29ubmVjdGlvblxuICAgIGNsb3NlUGluZygpO1xuICAgIGV2dFNvdXJjZSA9ICgwLCBfZXZlbnRzb3VyY2UpLmdldEV2ZW50U291cmNlV3JhcHBlcih7XG4gICAgICAgIHBhdGg6IGAke2Fzc2V0UHJlZml4fS9fbmV4dC93ZWJwYWNrLWhtcj9wYWdlPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGN1cnJlbnRQYWdlKX1gLFxuICAgICAgICB0aW1lb3V0OiA1MDAwXG4gICAgfSk7XG4gICAgZXZ0U291cmNlLmFkZE1lc3NhZ2VMaXN0ZW5lcigoZXZlbnQpPT57XG4gICAgICAgIGlmIChldmVudC5kYXRhLmluZGV4T2YoJ3snKSA9PT0gLTEpIHJldHVybjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgLy8gZG9uJ3QgYXR0ZW1wdCBmZXRjaGluZyB0aGUgcGFnZSBpZiB3ZSdyZSBhbHJlYWR5IHNob3dpbmdcbiAgICAgICAgICAgIC8vIHRoZSBkZXYgb3ZlcmxheSBhcyB0aGlzIGNhbiBjYXVzZSB0aGUgZXJyb3IgdG8gYmUgdHJpZ2dlcmVkXG4gICAgICAgICAgICAvLyByZXBlYXRlZGx5XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pbnZhbGlkICYmICFzZWxmLl9fTkVYVF9EQVRBX18uZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gUGF5bG9hZCBjYW4gYmUgaW52YWxpZCBldmVuIGlmIHRoZSBwYWdlIGRvZXMgbm90IGV4aXN0LlxuICAgICAgICAgICAgICAgIC8vIFNvLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBleGlzdHMgYmVmb3JlIHJlbG9hZGluZy5cbiAgICAgICAgICAgICAgICBmZXRjaChsb2NhdGlvbi5ocmVmLCB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nXG4gICAgICAgICAgICAgICAgfSkudGhlbigocGFnZVJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VSZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignb24tZGVtYW5kLWVudHJpZXMgZmFpbGVkIHRvIHBhcnNlIHJlc3BvbnNlJywgZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbi1kZW1hbmQtZW50cmllcy11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjbG9zZVBpbmciLCJzZXR1cFBpbmciLCJjdXJyZW50UGFnZSIsIl9ldmVudHNvdXJjZSIsInJlcXVpcmUiLCJldnRTb3VyY2UiLCJjbG9zZSIsImFzc2V0UHJlZml4IiwicGF0aG5hbWVGbiIsInJldHJ5IiwicGF0aG5hbWUiLCJnZXRFdmVudFNvdXJjZVdyYXBwZXIiLCJwYXRoIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidGltZW91dCIsImFkZE1lc3NhZ2VMaXN0ZW5lciIsImV2ZW50IiwiZGF0YSIsImluZGV4T2YiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiaW52YWxpZCIsInNlbGYiLCJfX05FWFRfREFUQV9fIiwiZXJyIiwiZmV0Y2giLCJsb2NhdGlvbiIsImhyZWYiLCJjcmVkZW50aWFscyIsInRoZW4iLCJwYWdlUmVzIiwic3RhdHVzIiwicmVsb2FkIiwiY29uc29sZSIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/dev/on-demand-entries-utils.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__("./node_modules/next/dist/client/dev/amp-dev.js"));
/******/ _N_E = __webpack_exports__;
/******/ }
]);